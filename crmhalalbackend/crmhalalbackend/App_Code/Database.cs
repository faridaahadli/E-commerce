using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;

namespace CRM_Halal.App_Code
{
    public static class Database
    {
        public static string connectionString = ConfigurationManager.ConnectionStrings["DBpath"].ConnectionString;

        //add user from admin panel
        public static string addUsers = @"INSERT INTO USERS(NAME,SURNAME,TELEPHONE,ADDRESS,BIRTHDATE,EMAIL,PASSWORD,ROLE_ID,COMPANY_ID,DIVISION_ID,BRANCH_ID,POSITION_ID,ACTIVE,CODE)
                                                     VALUES(@NAME,@SURNAME,@TELEPHONE,@ADDRESS,@BIRTHDATE,@EMAIL,@PASSWORD,@ROLE_ID,@COMPANY_ID,@DIVISION_ID,@BRANCH_ID,@POSITION_ID,@ACTIVE,@CODE)";
        public static string addUsersWithId = @"INSERT INTO USERS(NAME,SURNAME,ADDRESS,TELEPHONE,BIRTHDATE,EMAIL,PASSWORD,ROLE_ID,COMPANY_ID,DIVISION_ID,BRANCH_ID,POSITION_ID,ACTIVE,CODE)
                                                     VALUES(@NAME,@SURNAME,@ADDRESS,@TELEPHONE,@BIRTHDATE,@EMAIL,@PASSWORD,@ROLE_ID,@COMPANY_ID,@DIVISION_ID,@BRANCH_ID,@POSITION_ID,@ACTIVE,@CODE);SELECT SCOPE_IDENTITY();";
        public static string addUserSocialLinks = @"INSERT INTO USER_SOCIAL_LINKS(PROVIDER,SOCIAL_USER_ID,SOCIAL_USER_TOKEN,USER_ID) VALUES(@PROVIDER,@SOCIAL_USER_ID,@SOCIAL_USER_TOKEN,@USER_ID);SELECT SCOPE_IDENTITY();";

        public static string getUserSocialLinksByUserId = @"SELECT * FROM USER_SOCIAL_LINKS WHERE USER_ID=@USER_ID";
        public static string updateUserSocialLinks = @"UPDATE USER_SOCIAL_LINKS SET PROVIDER=@PROVIDER,SOCIAL_USER_ID=@SOCIAL_USER_ID,SOCIAL_USER_TOKEN=@SOCIAL_USER_TOKEN WHERE ID=@ID AND USER_ID=@USER_ID";
        public static string deleteUserSocialLinks = "DELETE FROM USER_SOCIAL_LINKS WHERE ID=@ID AND USER_ID=@USER_ID";
        public static string selectUsersById = @"SELECT U.*,UR.NAME AS ROLE_NAME FROM USERS U, USER_ROLE UR WHERE U.ID=@ID AND U.ROLE_ID=UR.ID ORDER BY U.ID DESC";
        public static string selectUsersDetails = @"SELECT U.*, C.NAME AS COMPANY_NAME,C.ID AS COMPANY_ID, CD.NAME AS COMPANY_DIVISION_NAME, CD.ID AS COMPANY_DIVISION_ID, CP.NAME AS COMPANY_POSITION_NAME, CP.ID AS COMPANY_POSITION_ID, CB.NAME AS COMPANY_BRANCH_NAME, CB.ID AS COMPANY_BRANCH_ID,R.NAME AS ROLE_NAME,R.ID AS ROLE_ID 
                                                    FROM USERS U LEFT JOIN COMPANIES C ON U.COMPANY_ID=C.ID LEFT JOIN COMPANY_DIVISION CD ON U.DIVISION_ID=CD.ID LEFT JOIN COMPANY_POSITION CP ON CP.ID=U.POSITION_ID  LEFT JOIN COMPANY_BRANCH CB ON U.BRANCH_ID=CB.ID, USER_ROLE R WHERE
                                                    U.ROLE_ID=R.ID ORDER BY U.ID DESC";
        public static string selectUsersDetailsByCompany = @"SELECT U.*, C.NAME AS COMPANY_NAME,C.ID AS COMPANY_ID, CD.NAME AS COMPANY_DIVISION_NAME, CD.ID AS COMPANY_DIVISION_ID, CP.NAME AS COMPANY_POSITION_NAME, CP.ID AS COMPANY_POSITION_ID, CB.NAME AS COMPANY_BRANCH_NAME, CB.ID AS COMPANY_BRANCH_ID,R.NAME AS ROLE_NAME,R.ID AS ROLE_ID 
                                                    FROM USERS U, COMPANIES C, COMPANY_DIVISION CD, COMPANY_POSITION CP,COMPANY_BRANCH CB, USER_ROLE R WHERE
                                                    U.ROLE_ID=R.ID AND C.ID=@COMPANY_ID AND U.COMPANY_ID=C.ID AND U.DIVISION_ID=CD.ID AND CP.ID=U.POSITION_ID AND U.BRANCH_ID=CB.ID ORDER BY U.ID DESC";
        public static string selectUsersDetailsByCompanyAndId = @"SELECT U.*, C.NAME AS COMPANY_NAME,C.ID AS COMPANY_ID, CD.NAME AS COMPANY_DIVISION_NAME, CD.ID AS COMPANY_DIVISION_ID, CP.NAME AS COMPANY_POSITION_NAME, CP.ID AS COMPANY_POSITION_ID, CB.NAME AS COMPANY_BRANCH_NAME, CB.ID AS COMPANY_BRANCH_ID,R.NAME AS ROLE_NAME,R.ID AS ROLE_ID 
                                                    FROM USERS U, COMPANIES C, COMPANY_DIVISION CD, COMPANY_POSITION CP,COMPANY_BRANCH CB, USER_ROLE R WHERE
                                                    U.ROLE_ID=R.ID AND U.ID=@ID AND C.ID=@COMPANY_ID AND U.COMPANY_ID=C.ID AND U.DIVISION_ID=CD.ID AND CP.ID=U.POSITION_ID AND U.BRANCH_ID=CB.ID ORDER BY U.ID DESC";
        public static string selectUsersDetailsByUserName = @"SELECT U.*, C.NAME AS COMPANY_NAME, CD.NAME AS COMPANY_DIVISION_NAME, CP.NAME AS COMPANY_POSITION_NAME, CB.NAME AS COMPANY_BRANCH_NAME,R.NAME AS ROLE_NAME 
                                                    FROM USERS U LEFT JOIN COMPANIES C ON U.COMPANY_ID=C.ID LEFT JOIN COMPANY_DIVISION CD ON U.DIVISION_ID=CD.ID LEFT JOIN COMPANY_POSITION CP ON CP.ID=U.POSITION_ID  LEFT JOIN COMPANY_BRANCH CB ON U.BRANCH_ID=CB.ID, USER_ROLE R WHERE
                                                    U.ROLE_ID=R.ID AND U.EMAIL=@EMAIL AND U.ACTIVE=1";
        public static string updateUsers = @"UPDATE USERS SET NAME=@NAME,SURNAME=@SURNAME,TELEPHONE=@TELEPHONE,ADDRESS=@ADDRESS,BIRTHDATE=@BIRTHDATE,EMAIL=@EMAIL,PASSWORD=@PASSWORD,
                                            COMPANY_ID=@COMPANY_ID,DIVISION_ID=@DIVISION_ID,BRANCH_ID=@BRANCH_ID,POSITION_ID=@POSITION_ID,ACTIVE=@ACTIVE WHERE ID=@ID";
        public static string updateUsersProfile = @"UPDATE USERS SET {0} WHERE ID=@ID";
        public static string changeActiveStatusUsers = "UPDATE USERS SET ACTIVE=(CASE WHEN ACTIVE = 1 THEN 0 ELSE 1 END),IS_PHONE_VALIDATED=1 WHERE ID=@ID";
        public static string ActiveStatusUsers = "UPDATE USERS SET ACTIVE=1,IS_PHONE_VALIDATED=1 WHERE ID=@ID";
        public static string changeActiveStatusUsersByCompany = "UPDATE USERS SET ACTIVE=@ACTIVE WHERE ID=@ID AND COMPANY_ID=@COMPANY_ID";
        public static string selectUserByIdAndCode = "SELECT * FROM USERS WHERE ID=@ID AND CODE=@CODE";

        public static string getUserByPhoneOrEmail = "SELECT * FROM USERS WHERE ACTIVE=1 AND (TELEPHONE=@LOGIN OR EMAIL=@LOGIN)";

        //public static string addUserRole = "INSERT INTO USER_ROLE(NAME) VALUES(@NAME)";

        public static string getAllUserRole = "SELECT * FROM USER_ROLE ORDER BY NAME ASC";
        public static string getAllActiveCompanies = "SELECT * FROM COMPANIES WHERE ACTIVE=1 ORDER BY NAME ASC";
        public static string getAllActiveCompaniesById = "SELECT * FROM COMPANIES WHERE ACTIVE=1 AND ID=@ID ORDER BY NAME ASC";
        public static string getAllCompanyBranchesByCompanyID = "SELECT * FROM COMPANY_BRANCH WHERE COMPANY_ID=@COMPANY_ID AND ACTIVE=1 ORDER BY NAME ASC";
        public static string getAllCompanyDivisionByCompanyID = "SELECT * FROM COMPANY_DIVISION WHERE COMPANY_ID=@COMPANY_ID AND ACTIVE=1 ORDER BY NAME ASC";
        public static string getAllCompanyPositionByCompanyID = "SELECT * FROM COMPANY_POSITION WHERE COMPANY_ID=@COMPANY_ID AND ACTIVE=1 ORDER BY NAME ASC";

        //User login get User details
        public static string getUserDetails = @"SELECT * FROM USERS WHERE EMAIL=@EMAIL AND ACTIVE=1";
        public static string getUserDetailsWithRole = @"SELECT U.*, UR.NAME AS ROLE_NAME FROM USERS U, USER_ROLE UR WHERE U.EMAIL=@EMAIL AND U.ACTIVE=1 AND U.ROLE_ID=UR.ID";
        public static string getUserDetailsWithRoleById = @"SELECT U.*, UR.NAME AS ROLE_NAME FROM USERS U, USER_ROLE UR WHERE U.ID=@ID AND U.ACTIVE=1 AND U.ROLE_ID=UR.ID";
        public static string checkUserEmail = @"SELECT * FROM USERS WHERE EMAIL=@EMAIL";

        //Companies Admin Panel
        public static string addCompany = "INSERT INTO COMPANIES(NAME,EMAIL,ADDRESS,PHONE,ACTIVE,AUTOMATIC_USER_CONFIRM,TICKET_CONFIRM,IS_VIP,MINIMUM_AMOUNT_REQUEST,PRICE_FOR_ADDITIONAL_KM) VALUES(@NAME,@EMAIL,@ADDRESS,@PHONE,@ACTIVE,@AUTOMATIC_USER_CONFIRM,@TICKET_CONFIRM,@IS_VIP,@MINIMUM_AMOUNT_REQUEST,@PRICE_FOR_ADDITIONAL_KM);SELECT SCOPE_IDENTITY();";
        public static string addCompanyRegistration = "INSERT INTO COMPANIES(NAME,EMAIL,ADDRESS,PHONE,ACTIVE,CONTACT_PERSON,AUTOMATIC_USER_CONFIRM,TICKET_CONFIRM,IS_VIP,MINIMUM_AMOUNT_REQUEST,PRICE_FOR_ADDITIONAL_KM) VALUES(@NAME,@EMAIL,@ADDRESS,@PHONE,0,@CONTACT_PERSON,0,0,0,0,0);";
        public static string updateCompanyLogo = "UPDATE COMPANIES SET LOGO=@LOGO WHERE ID=@ID";
        public static string getAllCompanies = "SELECT * FROM COMPANIES ORDER BY ID DESC";
        public static string getAllCompaniesById = "SELECT * FROM COMPANIES WHERE ID=@ID";
        public static string updateCompanies = "UPDATE COMPANIES SET TICKET_CONFIRM=@TICKET_CONFIRM,AUTOMATIC_USER_CONFIRM=@AUTOMATIC_USER_CONFIRM,NAME=@NAME,PHONE=@PHONE,ADDRESS=@ADDRESS,EMAIL=@EMAIL,ACTIVE=@ACTIVE,IS_VIP=@IS_VIP,MINIMUM_AMOUNT_REQUEST=@MINIMUM_AMOUNT_REQUEST,PRICE_FOR_ADDITIONAL_KM=@PRICE_FOR_ADDITIONAL_KM WHERE ID=@ID";
        public static string changeActiveCompanies = "UPDATE COMPANIES SET ACTIVE=(CASE WHEN ACTIVE = 1 THEN 0 ELSE 1 END) WHERE ID=@ID";

        //Company structure
        public static string getAllCompanyBranchByCompanyId = "SELECT CB.*, C.NAME AS COMPANY_NAME, BC.NAME AS HEAD_BRANCH_NAME FROM COMPANIES C, COMPANY_BRANCH CB LEFT JOIN COMPANY_BRANCH BC ON CB.HEAD_BRANCH_ID=BC.ID AND BC.ACTIVE=1 WHERE CB.COMPANY_ID=C.ID AND C.ID=@COMPANY_ID AND C.ACTIVE=1 AND CB.ACTIVE=1 ORDER BY CB.ID DESC  OFFSET @PAGE*@PAGE_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY";
        public static string getAllCompanyBranch = "SELECT CB.*, C.NAME AS COMPANY_NAME, BC.NAME AS HEAD_BRANCH_NAME FROM COMPANIES C, COMPANY_BRANCH CB LEFT JOIN COMPANY_BRANCH BC ON CB.HEAD_BRANCH_ID=BC.ID AND BC.ACTIVE=1 WHERE CB.COMPANY_ID=C.ID AND C.ACTIVE=1 AND CB.ACTIVE=1 ORDER BY C.ID DESC";
        public static string getAllCompanyBranchByCompanyIdFull = "SELECT * FROM COMPANY_BRANCH WHERE COMPANY_ID=@COMPANY_ID AND ACTIVE=1 AND (SELECT ACTIVE FROM COMPANIES WHERE ID=@COMPANY_ID)=1";
        public static string getAllCompanyDivisionByCompanyId = "SELECT CD.*, C.NAME AS COMPANY_NAME, DC.NAME AS DIVISION_NAME FROM COMPANIES C, COMPANY_DIVISION CD LEFT JOIN COMPANY_DIVISION DC ON CD.HEAD_DIVISION_ID=DC.ID WHERE CD.COMPANY_ID=C.ID AND C.ID=@COMPANY_ID ORDER BY CD.ID DESC";
        public static string getAllCompanyPositionByCompanyId = "SELECT CP.*, C.NAME AS COMPANY_NAME, PC.NAME AS POSITION_NAME FROM COMPANIES C, COMPANY_POSITION CP LEFT JOIN COMPANY_POSITION PC ON CP.HEAD_POSITION_ID=PC.ID WHERE CP.COMPANY_ID=C.ID AND C.ID=@COMPANY_ID ORDER BY CP.ID DESC";
        public static string selectUsersDetailsByCompanyId = @"SELECT U.*, C.NAME AS COMPANY_NAME, CD.NAME AS COMPANY_DIVISION_NAME, CP.NAME AS COMPANY_POSITION_NAME, CB.NAME AS COMPANY_BRANCH_NAME,R.NAME AS ROLE_NAME 
                                                    FROM USERS U,COMPANIES C,COMPANY_DIVISION CD, COMPANY_POSITION CP,COMPANY_BRANCH CB, USER_ROLE R WHERE
                                                    U.ROLE_ID=R.ID AND U.COMPANY_ID=C.ID AND U.DIVISION_ID=CD.ID AND U.BRANCH_ID=CB.ID AND C.ID=@COMPANY_ID ORDER BY U.ID DESC";
        

        //Companies Branch Admin Panel
        public static string addCompanyBranch = "INSERT INTO COMPANY_BRANCH(NAME,COMPANY_ID,HEAD_BRANCH_ID,IS_MAIN_HEAD,ACTIVE,POSITION_W,POSITION_L,MAX_DELIVERY_DISTANCE) VALUES(@NAME,@COMPANY_ID,@HEAD_BRANCH_ID,@IS_MAIN_HEAD,@ACTIVE,@POSITION_W,@POSITION_L,@MAX_DELIVERY_DISTANCE)";
        public static string getAllCompanyBranchById = "SELECT CB.*, C.NAME AS COMPANY_NAME, BC.NAME AS HEAD_BRANCH_NAME FROM COMPANIES C, COMPANY_BRANCH CB LEFT JOIN COMPANY_BRANCH BC ON CB.HEAD_BRANCH_ID=BC.ID AND BC.ACTIVE=1 WHERE CB.COMPANY_ID=C.ID AND CB.ID=@ID AND C.ACTIVE=1 AND CB.ACTIVE=1 ORDER BY CB.ID DESC";
        public static string getAllCompanyBranches = "SELECT CB.*, C.NAME AS COMPANY_NAME, BC.NAME AS BRANCH_NAME FROM COMPANIES C, COMPANY_BRANCH CB LEFT JOIN COMPANY_BRANCH BC ON CB.HEAD_BRANCH_ID=BC.ID WHERE CB.COMPANY_ID=C.ID AND C.ACTIVE=1 ORDER BY C.NAME ASC";
        public static string getAllCompanyBranchesByCompany = "SELECT CB.*, C.NAME AS COMPANY_NAME, BC.NAME AS BRANCH_NAME FROM COMPANIES C, COMPANY_BRANCH CB LEFT JOIN COMPANY_BRANCH BC ON CB.HEAD_BRANCH_ID=BC.ID WHERE CB.COMPANY_ID=C.ID AND C.ID=@COMPANY_ID AND C.ACTIVE=1 ORDER BY C.NAME ASC";
        public static string updateCompanyBranch = "UPDATE COMPANY_BRANCH SET ACTIVE=@ACTIVE,NAME=@NAME, COMPANY_ID=@COMPANY_ID,HEAD_BRANCH_ID=@HEAD_BRANCH_ID,IS_MAIN_HEAD=@IS_MAIN_HEAD,POSITION_W=@POSITION_W,POSITION_L=@POSITION_L,MAX_DELIVERY_DISTANCE=@MAX_DELIVERY_DISTANCE WHERE ID=@ID";
        public static string changeActiveStatusCompanyBranch = "UPDATE COMPANY_BRANCH SET ACTIVE=(CASE WHEN ACTIVE = 1 THEN 0 ELSE 1 END) WHERE ID=@ID AND COMPANY_ID=@COMPANY_ID";
        public static string changeInactiveStatusCompanyBranch = "UPDATE COMPANY_BRANCH SET ACTIVE=0 WHERE ID=@ID AND COMPANY_ID=@COMPANY_ID";

        //Company Division Admin Panel
        public static string addCompanyDivision = "INSERT INTO COMPANY_DIVISION(NAME,COMPANY_ID,HEAD_DIVISION_ID,IS_MAIN_HEAD,ACTIVE) VALUES(@NAME,@COMPANY_ID,@HEAD_DIVISION_ID,@IS_MAIN_HEAD,@ACTIVE)";
        public static string getAllCompanyDivisionById = "SELECT * FROM COMPANY_DIVISION WHERE ID=@ID AND ACTIVE=1 AND COMPANY_ID=@COMPANY_ID ORDER BY ID DESC";
        public static string getAllCompanyDivisionByCompanyIdPaging = "SELECT CD.*, C.NAME AS COMPANY_NAME, DC.NAME AS DIVISION_NAME FROM COMPANIES C, COMPANY_DIVISION CD LEFT JOIN COMPANY_DIVISION DC ON CD.HEAD_DIVISION_ID=DC.ID WHERE CD.COMPANY_ID=C.ID AND C.ID=@COMPANY_ID AND CD.ACTIVE=1 AND C.ACTIVE=1 ORDER BY CD.ID DESC OFFSET @PAGE*@PAGE_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY";
        public static string getAllCompanyDivisionByCompanyIdFull = "SELECT * FROM COMPANY_DIVISION WHERE ACTIVE=1 AND COMPANY_ID=@COMPANY_ID ORDER BY ID DESC";
        public static string updateCompanyDivision = "UPDATE COMPANY_DIVISION SET ACTIVE=@ACTIVE,NAME=@NAME, COMPANY_ID=@COMPANY_ID,HEAD_DIVISION_ID=@HEAD_DIVISION_ID,IS_MAIN_HEAD=@IS_MAIN_HEAD WHERE ID=@ID";
        public static string changeActiveStatusCompanyDivision = "UPDATE COMPANY_DIVISION SET ACTIVE=(CASE WHEN ACTIVE = 1 THEN 0 ELSE 1 END) WHERE ID=@ID";
        public static string inactiveCompanyDivision = "UPDATE COMPANY_DIVISION SET ACTIVE=0 WHERE ID=@ID";

        //Company Position Admin Panel
        public static string addCompanyPosition = "INSERT INTO COMPANY_POSITION(NAME,COMPANY_ID,HEAD_POSITION_ID,IS_MAIN_HEAD,ACTIVE) VALUES(@NAME,@COMPANY_ID,@HEAD_POSITION_ID,@IS_MAIN_HEAD,@ACTIVE)";
        public static string getAllCompanyPositionById = "SELECT CP.*, C.NAME AS COMPANY_NAME, PC.NAME AS POSITION_NAME FROM COMPANIES C, COMPANY_POSITION CP LEFT JOIN COMPANY_POSITION PC ON CP.HEAD_POSITION_ID=PC.ID WHERE CP.COMPANY_ID=C.ID AND C.ACTIVE=1 AND CP.ACTIVE=1 AND CP.ID=@ID ORDER BY CP.ID DESC";
        public static string getAllCompanyPosition = "SELECT CP.*, C.NAME AS COMPANY_NAME, PC.NAME AS POSITION_NAME FROM COMPANIES C, COMPANY_POSITION CP LEFT JOIN COMPANY_POSITION PC ON CP.HEAD_POSITION_ID=PC.ID WHERE CP.COMPANY_ID=C.ID AND C.ACTIVE=1 ORDER BY CP.ID DESC";
        public static string updateCompanyPosition = "UPDATE COMPANY_POSITION SET ACTIVE=@ACTIVE,NAME=@NAME, COMPANY_ID=@COMPANY_ID,HEAD_POSITION_ID=@HEAD_POSITION_ID,IS_MAIN_HEAD=@IS_MAIN_HEAD WHERE ID=@ID";
        public static string changeActiveStatusCompanyPosition = "UPDATE COMPANY_POSITION SET ACTIVE=(CASE WHEN ACTIVE = 1 THEN 0 ELSE 1 END) WHERE ID=@ID";

        public static string getAllCompanyPositionByCompanyIdPaging = "SELECT CD.*, C.NAME AS COMPANY_NAME, DC.NAME AS POSITION_NAME FROM COMPANIES C, COMPANY_POSITION CD LEFT JOIN COMPANY_POSITION DC ON CD.HEAD_POSITION_ID=DC.ID WHERE CD.COMPANY_ID=C.ID AND C.ID=@COMPANY_ID AND CD.ACTIVE=1 AND C.ACTIVE=1 ORDER BY CD.ID DESC OFFSET @PAGE*@PAGE_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY";
        public static string getAllCompanyPositionByCompanyIdFull = "SELECT * FROM COMPANY_POSITION WHERE ACTIVE=1 AND COMPANY_ID=@COMPANY_ID ORDER BY ID DESC";
        public static string inactiveCompanyPosition = "UPDATE COMPANY_POSITION SET ACTIVE=0 WHERE ID=@ID";

        //user role Admin Panel
        public static string addUserRole = "INSERT INTO USER_ROLE(NAME,ACTIVE) VALUES(@NAME,@ACTIVE)";
        public static string getUserRole = "SELECT * FROM USER_ROLE ORDER BY ID DESC";
        public static string getUserRoleByID = "SELECT * FROM USER_ROLE WHERE ID=@ID";
        public static string updateUserRole = "UPDATE USER_ROLE SET NAME=@NAME,ACTIVE=@ACTIVE WHERE ID=@ID";
        public static string changeActiveStatusUserRole = "UPDATE USER_ROLE SET ACTIVE=(CASE WHEN ACTIVE = 1 THEN 0 ELSE 1 END) WHERE ID=@ID";

        //Measure type Admin Panel
        public static string addMeasureType = "INSERT INTO MEASURE_TYPE(NAME,COMPANY_ID) VALUES(@NAME,@COMPANY_ID)";
        public static string getMeasureType = "SELECT * FROM MEASURE_TYPE WHERE ACTIVE=1 ORDER BY ID DESC";
        public static string getMeasureTypeByCompanyId = "SELECT * FROM MEASURE_TYPE WHERE ACTIVE=1 AND COMPANY_ID=@COMPANY_ID ORDER BY ID DESC";
        public static string getMeasureTypePaging = "SELECT * FROM MEASURE_TYPE WHERE ACTIVE=1 AND COMPANY_ID=@COMPANY_ID ORDER BY ID DESC OFFSET @PAGE*@PAGE_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY";
        public static string getMeasureTypeById = "SELECT * FROM MEASURE_TYPE WHERE ACTIVE=1 AND ID=@ID";
        public static string updateMeasureType = "UPDATE MEASURE_TYPE SET NAME=@NAME WHERE ID=@ID";
        public static string deleteMeasureType = "UPDATE MEASURE_TYPE SET ACTIVE=0 WHERE ID=@ID AND COMPANY_ID=@COMPANY_ID";
        public static string getMeasureTypeOrderByName = "SELECT * FROM MEASURE_TYPE ORDER BY NAME ASC";
        public static string getMeasureTypeOrderByNameByCompanyId = "SELECT * FROM MEASURE_TYPE WHERE COMPANY_ID=@COMPANY_ID ORDER BY NAME ASC";

        //Hardware Manafacturer Admin Panel
        public static string addHardwareManafacturer = "INSERT INTO HARDWARE_MANUFACTURER(NAME,COMPANY_ID,ACTIVE,SHOW_ON_MAIN) VALUES(@NAME,@COMPANY_ID,@ACTIVE,@SHOW_ON_MAIN)";
        public static string getHardwareManafacturerWithCompany = "SELECT HM.*,C.NAME AS COMPANY_NAME FROM HARDWARE_MANUFACTURER HM, COMPANIES C WHERE HM.COMPANY_ID=@COMPANY_ID AND HM.ACTIVE=1 AND C.ACTIVE=1 AND C.ID=HM.COMPANY_ID ORDER BY ID DESC";
        public static string getHardwareManafacturerWithCompanyPaging = "SELECT HM.*,C.NAME AS COMPANY_NAME FROM HARDWARE_MANUFACTURER HM, COMPANIES C WHERE HM.COMPANY_ID=@COMPANY_ID AND HM.ACTIVE=1  AND C.ACTIVE=1 AND C.ID=HM.COMPANY_ID ORDER BY ID DESC OFFSET @PAGE*@PAGE_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY";
        public static string getHardwareManafacturerWithoutCompany = "SELECT HM.*,C.NAME AS COMPANY_NAME FROM HARDWARE_MANUFACTURER HM LEFT JOIN COMPANIES C ON C.ID=HM.COMPANY_ID WHERE HM.ACTIVE=1 ORDER BY ID DESC";
        public static string getHardwareManafacturerWithoutCompanyPaging = "SELECT HM.*,C.NAME AS COMPANY_NAME FROM HARDWARE_MANUFACTURER HM LEFT JOIN COMPANIES C ON C.ID=HM.COMPANY_ID WHERE HM.ACTIVE=1 ORDER BY ID DESC OFFSET @PAGE*@PAGE_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY";
        public static string getHardwareManafacturerByID = "SELECT * FROM HARDWARE_MANUFACTURER WHERE ID=@ID AND ACTIVE=1";
        public static string updateHardwareManafacturer = "UPDATE HARDWARE_MANUFACTURER SET ACTIVE=@ACTIVE,NAME=@NAME,COMPANY_ID=@COMPANY_ID,SHOW_ON_MAIN=@SHOW_ON_MAIN WHERE ID=@ID";
        public static string inactiveHardwareManafacturer = "UPDATE HARDWARE_MANUFACTURER SET ACTIVE=0 WHERE ID=@ID AND COMPANY_ID=@COMPANY_ID";
        public static string changeActiveStatusHardwareManafacturer = "UPDATE HARDWARE_MANUFACTURER SET ACTIVE=(CASE WHEN ACTIVE = 1 THEN 0 ELSE 1 END) WHERE ID=@ID";

        //Hardware Category Admin Panel
        public static string getHardwareCategoryByCompanyIdOrNull = "SELECT HC.*,CH.NAME AS HARDWARE_CATEGORY_NAME,C.NAME AS COMPANY_NAME FROM HARDWARE_CATEGORY HC LEFT JOIN HARDWARE_CATEGORY CH ON HC.CATEGORY_ID=CH.ID, COMPANIES C  WHERE HC.COMPANY_ID=@COMPANY_ID AND HC.COMPANY_ID=C.ID  ORDER BY HC.ID DESC";
        public static string addHardwareCategory = "INSERT INTO HARDWARE_CATEGORY(NAME,CATEGORY_ID,COMPANY_ID,ACTIVE) VALUES(@NAME,@CATEGORY_ID,@COMPANY_ID,@ACTIVE)";
        public static string getHardwareCategory = "SELECT HC.*,CH.NAME AS HARDWARE_CATEGORY_NAME,C.NAME AS COMPANY_NAME FROM HARDWARE_CATEGORY HC LEFT JOIN HARDWARE_CATEGORY CH ON HC.CATEGORY_ID=CH.ID, COMPANIES C WHERE HC.COMPANY_ID=C.ID AND C.ACTIVE=1  ORDER BY HC.ID DESC";
        public static string getHardwareCategoryById = "SELECT * FROM HARDWARE_CATEGORY WHERE ID=@ID ORDER BY ID DESC";
        public static string getHardwareCategoryOrderByName = "SELECT HC.* FROM HARDWARE_CATEGORY HC  WHERE (SELECT ACTIVE FROM COMPANIES WHERE ID=HC.COMPANY_ID)=1 AND HC.ACTIVE=1 ORDER BY NAME ASC";
        public static string updateHardwareCategory = "UPDATE HARDWARE_CATEGORY SET ACTIVE=@ACTIVE,NAME=@NAME,COMPANY_ID=@COMPANY_ID, CATEGORY_ID=@CATEGORY_ID WHERE ID=@ID";
        public static string getHardwareCategoryByCompanyId = "SELECT * FROM HARDWARE_CATEGORY WHERE COMPANY_ID=@COMPANY_ID AND ACTIVE=1";
        public static string changeActiveStatusHardwareCategory = "UPDATE HARDWARE_CATEGORY SET ACTIVE=(CASE WHEN ACTIVE = 1 THEN 0 ELSE 1 END) WHERE ID=@ID";
        public static string changeInactiveStatusHardwareCategory = "UPDATE HARDWARE_CATEGORY SET ACTIVE=0 WHERE ID=@ID AND COMPANY_ID=@COMPANY_ID";



        //Hardware Admin Panel
        public static string addHardware = @"INSERT INTO HARDWARE(NAME,DESCRIPTION,CATEGORY_ID,MANUFACTURER_ID,PRICE,ACTIVE,MEASURE_TYPE_ID,WEIGHT,DIMENSION_H,DIMENSION_W,DIMENSION_L) 
                                            VALUES(@NAME,@DESCRIPTION,@CATEGORY_ID,@MANUFACTURER_ID,@PRICE,@ACTIVE,@MEASURE_TYPE_ID,@WEIGHT,@DIMENSION_H,@DIMENSION_W,@DIMENSION_L); SELECT SCOPE_IDENTITY()";
        public static string getHardware = @"SELECT H.*, HC.NAME AS CATEGORY_NAME, HM.NAME AS MANUFACTURER_NAME,(SELECT TOP 1 HARDWARE_IMAGE FROM HARDWARE_PICTURES WHERE HARDWARE_ID=H.ID) AS PICTURE,MT.NAME AS MEASURE_TYPE_NAME FROM 
                                            HARDWARE H LEFT JOIN MEASURE_TYPE MT ON H.MEASURE_TYPE_ID=MT.ID, HARDWARE_CATEGORY HC, HARDWARE_MANUFACTURER HM WHERE 
                                            H.CATEGORY_ID=HC.ID AND H.MANUFACTURER_ID=HM.ID AND (SELECT ACTIVE FROM COMPANIES WHERE ID=HC.COMPANY_ID)=1 AND (SELECT ACTIVE FROM HARDWARE_CATEGORY WHERE ID=H.CATEGORY_ID)=1 AND (SELECT ACTIVE FROM HARDWARE_MANUFACTURER WHERE ID=H.MANUFACTURER_ID)=1 ORDER BY H.ID DESC";
        public static string getHardwareById = @"SELECT H.*,HC.NAME AS CATEGORY_NAME,C.ID AS COMPANY_ID,C.NAME AS COMPANY_NAME,C.LOGO AS COMPANY_LOGO,
                                                        (SELECT TOP(1) HARDWARE_IMAGE FROM HARDWARE_PICTURES WHERE HARDWARE_ID=H.ID ORDER BY ID ASC) AS HARDWARE_IMAGE
                                                        FROM HARDWARE H, HARDWARE_CATEGORY HC, COMPANIES C WHERE
                                                        H.CATEGORY_ID=HC.ID AND HC.COMPANY_ID=C.ID AND
                                                        C.ACTIVE=1 AND HC.ACTIVE=1 AND H.ACTIVE=1 AND HC.COMPANY_ID=@COMPANY_ID AND H.ID=@ID ORDER BY H.ID DESC";
        public static string updateHardware = "UPDATE HARDWARE SET NAME=@NAME, DESCRIPTION=@DESCRIPTION,CATEGORY_ID=@CATEGORY_ID,MANUFACTURER_ID=@MANUFACTURER_ID,PRICE=@PRICE,ACTIVE=@ACTIVE,MEASURE_TYPE_ID=@MEASURE_TYPE_ID,WEIGHT=@WEIGHT,DIMENSION_H=@DIMENSION_H,DIMENSION_W=@DIMENSION_W,DIMENSION_L=@DIMENSION_L WHERE ID=@ID";
        public static string getHardwareManafacturerOrderByName = "SELECT * FROM HARDWARE_MANUFACTURER ORDER BY NAME ASC";
        public static string getHardwareManafacturerByCompanyIdOrderByName = "SELECT * FROM HARDWARE_MANUFACTURER WHERE COMPANY_ID=@COMPANY_ID ORDER BY NAME ASC";
        public static string addHardwarePictures = "INSERT INTO HARDWARE_PICTURES(HARDWARE_ID,HARDWARE_IMAGE) VALUES(@HARDWARE_ID,@HARDWARE_IMAGE)";
        public static string changeActiveStatusHardware = "UPDATE HARDWARE SET ACTIVE=(CASE WHEN ACTIVE = 1 THEN 0 ELSE 1 END) WHERE ID=@ID";
        public static string inactiveHardware = "UPDATE HARDWARE SET ACTIVE=0 WHERE ID=@ID";
        public static string getHardwareManufacturerByHardwareCategory = "SELECT * FROM HARDWARE_MANUFACTURER WHERE ID IN (SELECT MANUFACTURER_ID FROM HARDWARE_CATEGORY_MANUFACTURE WHERE CATEGORY_ID=@CATEGORY_ID) AND ACTIVE=1 ORDER BY NAME ASC";


        //Hardware pictures Admin Panel
        public static string getAllHardwarePicturesByHardwareID = "SELECT * FROM HARDWARE_PICTURES WHERE HARDWARE_ID=@HARDWARE_ID";
        public static string updateHardwarePictures = "UPDATE HARDWARE_PICTURES SET HARDWARE_ID=@HARDWARE_ID,HARDWARE_IMAGE=@HARDWARE_IMAGE WHERE ID=@ID";
        public static string deleteHardwarePictures = "DELETE FROM HARDWARE_PICTURES WHERE ID=@ID";


        //Client Problem
        public static string userProblemSelectCommandPaging = @"SELECT HC.NAME AS HARDWARE_CATEGORY_NAME, W.NAME + ' ' + W.SURNAME AS WORKER_NAME,
                                                          HSC.NAME AS HARDWARE_SUBCATEGORY_NAME, HM.NAME AS HARDWARE_MANUFACTURER_NAME,
                                                          CP.*,CL.NAME + ' ' + CL.SURNAME  AS CLIENT_NAME,C.NAME AS COMPANY_NAME, CB.NAME AS COMPANY_BRANCH_NAME,H.NAME AS HARDWARE_NAME,CP.RESULT_DATE AS SERVICE_DATE 
                                                          FROM COMPANIES C, COMPANY_BRANCH CB, HARDWARE H, USERS CL,
                                                          HARDWARE_CATEGORY HC, HARDWARE_MANUFACTURER HM, HARDWARE_CATEGORY HSC, CLIENT_PROBLEM CP LEFT JOIN USERS W ON CP.WORKER_ID=W.ID 
                                                          WHERE CL.ID=CP.CLIENT_ID AND CP.CLIENT_ID=@CLIENT_ID AND CP.HARDWARE_ID=H.ID AND H.MANUFACTURER_ID=HM.ID  AND H.CATEGORY_ID=HSC.ID 
                                                          AND HSC.CATEGORY_ID=HC.ID AND CP.COMPANY_BRANCH_ID=CB.ID AND C.ID=CB.COMPANY_ID AND C.ACTIVE=1 AND HM.ACTIVE=1 AND HSC.ACTIVE=1 AND HC.ACTIVE=1 {0} ORDER BY CP.ID DESC OFFSET @PAGE*@PAGE_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY";

        public static string companyProblemSelectCommandPaging = @"SELECT HC.NAME AS HARDWARE_CATEGORY_NAME, W.NAME + ' ' + W.SURNAME AS WORKER_NAME,
                                                          HSC.NAME AS HARDWARE_SUBCATEGORY_NAME, HM.NAME AS HARDWARE_MANUFACTURER_NAME,
                                                          CP.*,CL.NAME + ' ' + CL.SURNAME  AS CLIENT_NAME,C.NAME AS COMPANY_NAME, CB.NAME AS COMPANY_BRANCH_NAME,H.NAME AS HARDWARE_NAME,CP.RESULT_DATE AS SERVICE_DATE 
                                                          FROM COMPANIES C, COMPANY_BRANCH CB, HARDWARE H, USERS CL,
                                                          HARDWARE_CATEGORY HC, HARDWARE_MANUFACTURER HM, HARDWARE_CATEGORY HSC, CLIENT_PROBLEM CP LEFT JOIN USERS W ON CP.WORKER_ID=W.ID 
                                                          WHERE CL.ID=CP.CLIENT_ID AND CP.HARDWARE_ID=H.ID AND H.MANUFACTURER_ID=HM.ID  AND H.CATEGORY_ID=HSC.ID 
                                                          AND HSC.CATEGORY_ID=HC.ID AND CP.COMPANY_BRANCH_ID=CB.ID AND C.ID=CB.COMPANY_ID AND C.ACTIVE=1 AND HM.ACTIVE=1 AND HSC.ACTIVE=1 AND HC.ACTIVE=1 {0} ORDER BY CP.ID DESC OFFSET @PAGE*@PAGE_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY";

        public static string userProblemSelectCommand = @"SELECT HC.NAME AS HARDWARE_CATEGORY_NAME, W.NAME + ' ' + W.SURNAME AS WORKER_NAME,
                                                          HSC.NAME AS HARDWARE_SUBCATEGORY_NAME, HM.NAME AS HARDWARE_MANUFACTURER_NAME,
                                                          CP.*,CL.NAME + ' ' + CL.SURNAME  AS CLIENT_NAME,C.NAME AS COMPANY_NAME, CB.NAME AS COMPANY_BRANCH_NAME,H.NAME AS HARDWARE_NAME,CP.RESULT_DATE AS SERVICE_DATE 
                                                          FROM COMPANIES C, COMPANY_BRANCH CB, HARDWARE H, USERS CL,
                                                          HARDWARE_CATEGORY HC, HARDWARE_MANUFACTURER HM, HARDWARE_CATEGORY HSC, CLIENT_PROBLEM CP LEFT JOIN USERS W ON CP.WORKER_ID=W.ID 
                                                          WHERE CL.ID=CP.CLIENT_ID AND CP.CLIENT_ID=@CLIENT_ID AND CP.HARDWARE_ID=H.ID AND H.MANUFACTURER_ID=HM.ID  AND H.CATEGORY_ID=HSC.ID 
                                                          AND HSC.CATEGORY_ID=HC.ID AND CP.COMPANY_BRANCH_ID=CB.ID AND C.ID=CB.COMPANY_ID AND C.ACTIVE=1 AND HM.ACTIVE=1 AND HSC.ACTIVE=1 AND HC.ACTIVE=1 {0}";


        public static string companyProblemSelectCommand = @"SELECT HC.NAME AS HARDWARE_CATEGORY_NAME, W.NAME + ' ' + W.SURNAME AS WORKER_NAME,
                                                          HSC.NAME AS HARDWARE_SUBCATEGORY_NAME, HM.NAME AS HARDWARE_MANUFACTURER_NAME,
                                                          CP.*,CL.NAME + ' ' + CL.SURNAME  AS CLIENT_NAME,C.NAME AS COMPANY_NAME, CB.NAME AS COMPANY_BRANCH_NAME,H.NAME AS HARDWARE_NAME,CP.RESULT_DATE AS SERVICE_DATE 
                                                          FROM COMPANIES C, COMPANY_BRANCH CB, HARDWARE H, USERS CL,
                                                          HARDWARE_CATEGORY HC, HARDWARE_MANUFACTURER HM, HARDWARE_CATEGORY HSC, CLIENT_PROBLEM CP LEFT JOIN USERS W ON CP.WORKER_ID=W.ID 
                                                          WHERE CL.ID=CP.CLIENT_ID AND CP.HARDWARE_ID=H.ID AND H.MANUFACTURER_ID=HM.ID  AND H.CATEGORY_ID=HSC.ID 
                                                          AND HSC.CATEGORY_ID=HC.ID AND CP.COMPANY_BRANCH_ID=CB.ID AND C.ID=CB.COMPANY_ID AND C.ACTIVE=1 AND HM.ACTIVE=1 AND HSC.ACTIVE=1 AND HC.ACTIVE=1 {0}";

        public static string userProblemSelectCommandById = @"SELECT HC.NAME AS HARDWARE_CATEGORY_NAME, W.NAME + ' ' + W.SURNAME AS WORKER_NAME,
                                                          HSC.NAME AS HARDWARE_SUBCATEGORY_NAME, HM.NAME AS HARDWARE_MANUFACTURER_NAME,
                                                          CP.*,CL.NAME + ' ' + CL.SURNAME  AS CLIENT_NAME,C.NAME AS COMPANY_NAME, CB.NAME AS COMPANY_BRANCH_NAME,H.NAME AS HARDWARE_NAME,CP.RESULT_DATE AS SERVICE_DATE, CP.IS_COMPANY AS IS_COMPANY
                                                          FROM COMPANIES C, COMPANY_BRANCH CB, HARDWARE H, USERS CL,
                                                          HARDWARE_CATEGORY HC, HARDWARE_MANUFACTURER HM, HARDWARE_CATEGORY HSC, CLIENT_PROBLEM CP LEFT JOIN USERS W ON CP.WORKER_ID=W.ID 
                                                          WHERE CL.ID=CP.CLIENT_ID AND CP.CLIENT_ID=@CLIENT_ID AND CP.HARDWARE_ID=H.ID AND H.MANUFACTURER_ID=HM.ID  AND H.CATEGORY_ID=HSC.ID 
                                                          AND HSC.CATEGORY_ID=HC.ID AND CP.COMPANY_BRANCH_ID=CB.ID AND C.ID=CB.COMPANY_ID AND CP.ID=@REQUEST_ID AND C.ACTIVE=1 AND HM.ACTIVE=1 AND HSC.ACTIVE=1 AND HC.ACTIVE=1";

        public static string companyProblemSelectCommandById = @"SELECT HC.NAME AS HARDWARE_CATEGORY_NAME, W.NAME + ' ' + W.SURNAME AS WORKER_NAME,
                                                          HSC.NAME AS HARDWARE_SUBCATEGORY_NAME, HM.NAME AS HARDWARE_MANUFACTURER_NAME,
                                                          CP.*,CL.NAME + ' ' + CL.SURNAME  AS CLIENT_NAME,C.NAME AS COMPANY_NAME, CB.NAME AS COMPANY_BRANCH_NAME,H.NAME AS HARDWARE_NAME,CP.RESULT_DATE AS SERVICE_DATE, CP.IS_COMPANY AS IS_COMPANY
                                                          FROM COMPANIES C, COMPANY_BRANCH CB, HARDWARE H, USERS CL,
                                                          HARDWARE_CATEGORY HC, HARDWARE_MANUFACTURER HM, HARDWARE_CATEGORY HSC, CLIENT_PROBLEM CP LEFT JOIN USERS W ON CP.WORKER_ID=W.ID 
                                                          WHERE CL.ID=CP.CLIENT_ID AND CP.HARDWARE_ID=H.ID AND H.MANUFACTURER_ID=HM.ID  AND H.CATEGORY_ID=HSC.ID 
                                                          AND HSC.CATEGORY_ID=HC.ID AND CP.COMPANY_BRANCH_ID=CB.ID AND C.ID=CB.COMPANY_ID AND CP.ID=@REQUEST_ID AND C.ACTIVE=1 AND HM.ACTIVE=1 AND HSC.ACTIVE=1 AND HC.ACTIVE=1";

        public static string outgoingProblemSelectCommand = @"SELECT HC.NAME AS HARDWARE_CATEGORY_NAME, W.NAME + ' ' + W.SURNAME AS WORKER_NAME,
                                                          HSC.NAME AS HARDWARE_SUBCATEGORY_NAME, HM.NAME AS HARDWARE_MANUFACTURER_NAME,
                                                          CP.*,CL.NAME AS CLIENT_NAME,C.NAME AS COMPANY_NAME, CB.NAME AS COMPANY_BRANCH_NAME,H.NAME AS HARDWARE_NAME,CP.RESULT_DATE AS SERVICE_DATE 
                                                          FROM COMPANIES C, COMPANY_BRANCH CB, HARDWARE H, USERS CL,
                                                          HARDWARE_CATEGORY HC, HARDWARE_MANUFACTURER HM, HARDWARE_CATEGORY HSC, CLIENT_PROBLEM CP LEFT JOIN USERS W ON CP.WORKER_ID=W.ID 
                                                          WHERE CL.ID=CP.CLIENT_ID AND CP.HARDWARE_ID=H.ID AND H.MANUFACTURER_ID=HM.ID  AND H.CATEGORY_ID=HSC.ID 
                                                          AND HSC.CATEGORY_ID=HC.ID AND CP.COMPANY_BRANCH_ID=CB.ID AND C.ID=CB.COMPANY_ID AND (SELECT COMPANY_ID FROM USERS WHERE ID=CP.CLIENT_ID)=@COMPANY_ID";
        public static string selectHardwareCategoryCommand = @"SELECT ID,NAME FROM HARDWARE_CATEGORY WHERE CATEGORY_ID IS NULL";
        public static string hardwareSourceSelectCommand = "SELECT ID,NAME FROM HARDWARE WHERE CATEGORY_ID=@CATEGORY_ID AND MANUFACTURER_ID=@MANUFACTURER_ID AND ACTIVE=1";
        public static string hardwareTypeSelectCommand = "SELECT ID,NAME FROM HARDWARE_CATEGORY WHERE ACTIVE=1 AND CATEGORY_ID=@CATEGORY_ID";
        public static string hardwareManufacturerSelectCommand = "SELECT ID, NAME FROM HARDWARE_MANUFACTURER ORDER BY NAME ASC";
        public static string addClientProblem= @"INSERT INTO CLIENT_PROBLEM(HARDWARE_ID,CLIENT_ID,VIDEO_URL,PROBLEM_DATE,SERVICE_DATE,WORKER_ID,PRICE,DESCRIPTION,STATUS,ADDED_BY,LAST_UPDATED_BY,SERIAL_NUMBER,SERVICE_DATE_FROM,SERVICE_DATE_TO,COMPANY_BRANCH_ID,IS_COMPANY,ADDRESS_ID)
                                                    VALUES
                                                 (@HARDWARE_ID,@CLIENT_ID,@VIDEO_URL,@PROBLEM_DATE,NULL,NULL,NULL,@DESCRIPTION,@STATUS,@ADDED_BY,@LAST_UPDATED_BY,@SERIAL_NUMBER,@SERVICE_DATE_FROM,@SERVICE_DATE_TO,@COMPANY_BRANCH_ID,@IS_COMPANY,@ADDRESS_ID); SELECT SCOPE_IDENTITY()";
        public static string addClientProblemFiles = @"INSERT INTO PROBLEM_FILES(PROBLEM_ID, PROBLEM_FILE, NAME, FILE_TYPE,ADDED_BY_USER)
                                                                    VALUES(@PROBLEM_ID, @PROBLEM_FILE, @NAME, @FILE_TYPE, @ADDED_BY_USER)";
        public static string deleteProblemFilesById = "DELETE FROM PROBLEM_FILES WHERE ID=@ID";
        public static string updateProblemFile = "UPDATE PROBLEM_FILES SET PROBLEM_ID=@PROBLEM_ID, PROBLEM_FILE=@PROBLEM_FILE,NAME=@NAME,FILE_TYPE=@FILE_TYPE,ADDED_BY_USER=@ADDED_BY_USER WHERE ID=@ID";
        public static string updateProblemStatus = "UPDATE CLIENT_PROBLEM SET STATUS=@STATUS WHERE ID=@ID";
        public static string updateProblemStage = "UPDATE CLIENT_PROBLEM SET STATUS=@STATUS {0} WHERE ID=@ID AND CLIENT_ID=@CLIENT_ID";

        //Client Request
        public static string addClientRequest= @"INSERT INTO CLIENT_REQUEST(NOTE,FILE_URL,USER_ID,STATUS,COMPANY_BRANCH_ID,ADDED_BY_USER)
                                    VALUES 
                                                                (@NOTE,@FILE_URL,@USER_ID,@STATUS,@COMPANY_BRANCH_ID,@ADDED_BY_USER);
                                     SELECT SCOPE_IDENTITY()";
        public static string getAllClientRequestByUserId = "SELECT CR.*,C.NAME AS COMPANY_NAME,CB.NAME AS COMPANY_BRANCH_NAME,U.NAME + ' ' + U.SURNAME as USER_NAME, U.ID AS USER_ID FROM USERS U,CLIENT_REQUEST CR,COMPANIES C,COMPANY_BRANCH CB WHERE CR.USER_ID=U.ID AND CR.USER_ID=@USER_ID AND CR.COMPANY_BRANCH_ID=CB.ID AND CB.COMPANY_ID=C.ID {0} ORDER BY CR.ID DESC";
        public static string getAllClientRequestByUserIdWithPaging = "SELECT CR.*,C.NAME AS COMPANY_NAME,CB.NAME AS COMPANY_BRANCH_NAME,U.NAME + ' ' + U.SURNAME as USER_NAME, U.ID AS USER_ID FROM USERS U,CLIENT_REQUEST CR,COMPANIES C,COMPANY_BRANCH CB WHERE CR.USER_ID=U.ID AND CR.USER_ID=@USER_ID AND CR.COMPANY_BRANCH_ID=CB.ID AND CB.COMPANY_ID=C.ID {0}  ORDER BY CR.ID {1} OFFSET @PAGE*@PAGE_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY";


        public static string getAllClientRequestForCompany = "SELECT CR.*,C.NAME AS COMPANY_NAME,CB.NAME AS COMPANY_BRANCH_NAME,U.NAME + ' ' + U.SURNAME as USER_NAME, U.ID AS USER_ID FROM USERS U,CLIENT_REQUEST CR,COMPANIES C,COMPANY_BRANCH CB WHERE CR.USER_ID=U.ID AND CR.COMPANY_BRANCH_ID=CB.ID AND CB.COMPANY_ID=C.ID {0} ORDER BY CR.ID DESC";

        public static string getAllClientRequestByUserIdWithPagingAndFilterByCompany = "SELECT CR.*,C.NAME AS COMPANY_NAME,CB.NAME AS COMPANY_BRANCH_NAME,U.NAME + ' ' + U.SURNAME as USER_NAME, U.ID AS USER_ID FROM USERS U,CLIENT_REQUEST CR,COMPANIES C,COMPANY_BRANCH CB WHERE CR.USER_ID=U.ID AND CR.USER_ID=@USER_ID AND CR.COMPANY_BRANCH_ID=CB.ID AND CB.COMPANY_ID=C.ID AND C.ID=@COMPANY_FILTER {0} ORDER BY CR.ID {1} OFFSET @PAGE*@PAGE_SIZE ROWS  FETCH NEXT @PAGE_SIZE ROWS ONLY";
        public static string getAllClientRequestByUserIdWithPagingAndFilterByCompanyTotal = "SELECT CR.*,C.NAME AS COMPANY_NAME,CB.NAME AS COMPANY_BRANCH_NAME,U.NAME + ' ' + U.SURNAME as USER_NAME, U.ID AS USER_ID FROM USERS U,CLIENT_REQUEST CR,COMPANIES C,COMPANY_BRANCH CB WHERE CR.USER_ID=U.ID AND CR.USER_ID=@USER_ID AND CR.COMPANY_BRANCH_ID=CB.ID AND CB.COMPANY_ID=C.ID AND C.ID=@COMPANY_FILTER {0}";
        public static string getAllClientRequestById = "SELECT CR.*,C.NAME AS COMPANY_NAME,CB.NAME AS COMPANY_BRANCH_NAME,U.NAME + ' ' + U.SURNAME as USER_NAME, U.ID AS USER_ID FROM USERS U,CLIENT_REQUEST CR,COMPANIES C,COMPANY_BRANCH CB WHERE CR.USER_ID=U.ID AND CR.ID=@ID AND CR.COMPANY_BRANCH_ID=CB.ID AND CB.COMPANY_ID=C.ID ORDER BY CR.ID DESC";
        public static string getAllClientRequestByUserIdAndId = "SELECT CR.*,C.NAME AS COMPANY_NAME,CB.NAME AS COMPANY_BRANCH_NAME,U.NAME + ' ' + U.SURNAME as USER_NAME, U.ID AS USER_ID FROM  USERS U,CLIENT_REQUEST CR,COMPANIES C,COMPANY_BRANCH CB WHERE CR.ID=@ID AND CR.USER_ID=U.ID  AND CR.USER_ID=@USER_ID AND CR.COMPANY_BRANCH_ID=CB.ID AND CB.COMPANY_ID=C.ID ORDER BY CR.ID DESC";
        public static string addClientRequestFiles = @"INSERT INTO REQUEST_FILES(REQUEST_ID, REQUEST_FILE, NAME, FILE_TYPE,ADDED_BY_USER)
                                                                    VALUES(@REQUEST_ID, @REQUEST_FILE, @NAME, @FILE_TYPE, @ADDED_BY_USER)";


        public static string getAllClientRequestWithPagingAndFilterByCompany = "SELECT CR.*,C.NAME AS COMPANY_NAME,CB.NAME AS COMPANY_BRANCH_NAME,U.NAME + ' ' + U.SURNAME as USER_NAME, U.ID AS USER_ID FROM USERS U,CLIENT_REQUEST CR,COMPANIES C,COMPANY_BRANCH CB WHERE CR.USER_ID=U.ID AND CR.COMPANY_BRANCH_ID=CB.ID AND CB.COMPANY_ID=C.ID {0} ORDER BY CR.ID {1} OFFSET @PAGE*@PAGE_SIZE ROWS  FETCH NEXT @PAGE_SIZE ROWS ONLY";
        public static string getAllClientRequestWithPagingAndFilterByCompanyTotal = "SELECT CR.*,C.NAME AS COMPANY_NAME,CB.NAME AS COMPANY_BRANCH_NAME,U.NAME + ' ' + U.SURNAME as USER_NAME, U.ID AS USER_ID FROM USERS U,CLIENT_REQUEST CR,COMPANIES C,COMPANY_BRANCH CB WHERE CR.USER_ID=U.ID AND CR.COMPANY_BRANCH_ID=CB.ID AND CB.COMPANY_ID=C.ID {0}";

        public static string getAllCommentsByRequestId = "SELECT RC.*, U.NAME + ' ' + U.SURNAME AS USER_NAME,U.ID AS USER_ID FROM REQUEST_COMMENTS RC, USERS U WHERE RC.FROM_USER_ID=U.ID AND RC.REQUEST_ID=@REQUEST_ID  ORDER BY ID DESC";
        public static string addNewRequestComment = @"INSERT INTO REQUEST_COMMENTS(REQUEST_ID,COMMENT_TEXT,COMMENT_DATE,FROM_USER_ID)
                                                                        VALUES(@REQUEST_ID,@COMMENT_TEXT,GETDATE(),@FROM_USER_ID)";
        public static string getAllRequestFilesByRequestId = "SELECT RF.*,  U.NAME + ' ' + U.SURNAME AS USER_NAME,U.ID AS USER_ID FROM REQUEST_FILES RF, USERS U WHERE RF.ADDED_BY_USER=U.ID AND RF.REQUEST_ID=@REQUEST_ID ORDER BY ID DESC";
        public static string deleteFromFilesByRequestIdAndUserId = "DELETE FROM REQUEST_FILES WHERE ID=@ID AND ADDED_BY_USER=@USER_ID";
        public static string getRequestFileInfoById = "SELECT * FROM REQUEST_FILES WHERE ID=@ID";
        public static string getProblemFileInfoById = "SELECT PROBLEM_FILE AS REQUEST_FILE, NAME, FILE_TYPE FROM PROBLEM_FILES WHERE ID=@ID";
        public static string getAllProblemFilesByProblemId = "SELECT PF.*, U.NAME + ' ' + U.SURNAME AS USER_NAME,U.ID AS USER_ID FROM PROBLEM_FILES PF, USERS U WHERE PF.ADDED_BY_USER=U.ID AND PF.PROBLEM_ID=@PROBLEM_ID ORDER BY PF.ID DESC";
        public static string deleteProblemFileByIdAndUserId = "DELETE FROM PROBLEM_FILES WHERE ID=@ID AND ADDED_BY_USER=@USER_ID";
        public static string getAllProblemCommentsByProblemId = "SELECT PC.*, U.NAME + ' ' + U.SURNAME AS USER_NAME,U.ID AS USER_ID FROM PROBLEM_COMMENTS PC, USERS U WHERE PC.FROM_USER_ID=U.ID AND PC.PROBLEM_ID=@PROBLEM_ID  ORDER BY PC.ID DESC";
        public static string addNewProblemComment = @"INSERT INTO PROBLEM_COMMENTS(PROBLEM_ID,COMMENT_TEXT,COMMENT_DATE,FROM_USER_ID)
                                                                        VALUES(@PROBLEM_ID,@COMMENT_TEXT,GETDATE(),@FROM_USER_ID)";

        //Client buying Request
        public static string addClientBuyingRequest = @"INSERT INTO BUYING_REQUEST(USE_DEFAULT_ADDRESS,CLIENT_ID,IS_ANSWERED,COMPLETED,COMPANY_ID,USER_ADDRESS_ID,RETURN_MONEY,ONLINE_PAYMENT,POS_NEEDED,STATUS,ADDED_BY_USER)
                                     VALUES
                                     (@USE_DEFAULT_ADDRESS,@CLIENT_ID,@IS_ANSWERED,@COMPLETED,(SELECT COMPANY_ID FROM HARDWARE_CATEGORY WHERE ID=(SELECT CATEGORY_ID FROM HARDWARE WHERE ID=@ID)),@USER_ADDRESS_ID,@RETURN_MONEY,@ONLINE_PAYMENT,@POS_NEEDED,@STATUS,@ADDED_BY_USER);SELECT SCOPE_IDENTITY()";

        public static string addClientBuyingRequstHardware= @"INSERT INTO BUYING_REQUEST_HARDWARE(BUYING_REQUEST_ID,HARDWARE_ID,QUANTITY,PRICE,SALE)
                                       VALUES
                                      (@BUYING_REQUEST_ID,@HARDWARE_ID,@QUANTITY,@PRICE,@SALE)";
        public static string addClientBuyingRequstHardwareApi = @"INSERT INTO BUYING_REQUEST_HARDWARE(BUYING_REQUEST_ID,HARDWARE_ID,QUANTITY,PRICE,SALE)
                                       VALUES
                                      (@BUYING_REQUEST_ID,@HARDWARE_ID,@QUANTITY,(SELECT PRICE FROM HARDWARE WHERE ID=@HARDWARE_ID),@SALE)";
        public static string getHardwareCompanySale = "SELECT * FROM HARDWARE_COMPANY_SALE WHERE HARDWARE_ID=@HARDWARE_ID AND COMPANY_ID=@COMPANY_ID";

        public static string checkProductQuantityOnTheStock = @"SELECT PRODUCT_QUANTITY FROM COMPANY_STOCK_PRODUCTS WHERE
                                                                 COMPANY_ID=@COMPANY_ID AND PRODUCT_ID=@PRODUCT_ID";


        public static string buyingRequestHardwareSourceSelectCommand = "SELECT ID,NAME FROM HARDWARE H WHERE CATEGORY_ID=@CATEGORY_ID AND MANUFACTURER_ID=@MANUFACTURER_ID AND (SELECT PRODUCT_QUANTITY FROM COMPANY_STOCK_PRODUCTS WHERE COMPANY_ID=@COMPANY_ID AND PRODUCT_ID=H.ID)>0";


        //Client buying request list
        public static string getAllBuyingRequestByClientId = @"SELECT BR.*,C.NAME AS COMPANY_NAME,
                                                            (CASE
                                                            WHEN USE_DEFAULT_ADDRESS = 1
                                                            THEN
                                                            (SELECT ADDRESS FROM USERS WHERE ID = @USER_ID)
                                                            ELSE
                                                            NEW_DELIVERY_ADDRESS END) AS ADDRESS,
                                                            ISNULL((SELECT SUM(PRICE*(100-ISNULL(SALE,0))/100) FROM BUYING_REQUEST_HARDWARE WHERE BUYING_REQUEST_ID= BR.ID),0) AS TOTAL_SUM
                                                            FROM BUYING_REQUEST BR,COMPANIES C WHERE BR.COMPANY_ID=C.ID AND BR.CLIENT_ID=@USER_ID {0} ORDER BY BR.ID DESC";
        public static string getAllBuyingRequestForCompany = @"SELECT BR.*,C.NAME AS COMPANY_NAME,
                                                            (CASE
                                                            WHEN USE_DEFAULT_ADDRESS = 1
                                                            THEN
                                                            (SELECT ADDRESS FROM USERS WHERE ID = @USER_ID)
                                                            ELSE
                                                            NEW_DELIVERY_ADDRESS END) AS ADDRESS,
                                                            ISNULL((SELECT SUM(PRICE*(100-ISNULL(SALE,0))/100) FROM BUYING_REQUEST_HARDWARE WHERE BUYING_REQUEST_ID= BR.ID),0) AS TOTAL_SUM
                                                            FROM BUYING_REQUEST BR,COMPANIES C WHERE BR.COMPANY_ID=C.ID {0} ORDER BY BR.ID DESC";

        public static string getAllBuyingRequestByClientIdWithPagination = @"SELECT BR.*,C.NAME AS COMPANY_NAME,
                                                            (CASE
                                                            WHEN USE_DEFAULT_ADDRESS = 1
                                                            THEN
                                                            (SELECT ADDRESS FROM USERS WHERE ID = @USER_ID)
                                                            ELSE
                                                            NEW_DELIVERY_ADDRESS END) AS ADDRESS,
                                                            ISNULL((SELECT SUM(PRICE*(100-ISNULL(SALE,0))/100) FROM BUYING_REQUEST_HARDWARE WHERE BUYING_REQUEST_ID= BR.ID),0) AS TOTAL_SUM
                                                            FROM BUYING_REQUEST BR,COMPANIES C WHERE BR.COMPANY_ID=C.ID AND BR.CLIENT_ID=@USER_ID {0} ORDER BY BR.ID {1} OFFSET @PAGE*@PAGE_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY";

        public static string getAllBuyingRequestForCompanyWithPagination = @"SELECT BR.*,C.NAME AS COMPANY_NAME, W.NAME  + ' ' + W.SURNAME AS WORKER_NAME,
                                                            (CASE
                                                            WHEN USE_DEFAULT_ADDRESS = 1
                                                            THEN
                                                            (SELECT ADDRESS FROM USERS WHERE ID = @USER_ID)
                                                            ELSE
                                                            NEW_DELIVERY_ADDRESS END) AS ADDRESS,
                                                            ISNULL((SELECT SUM(PRICE*(100-ISNULL(SALE,0))/100)*SUM(QUANTITY)  FROM BUYING_REQUEST_HARDWARE WHERE BUYING_REQUEST_ID= BR.ID),0) AS TOTAL_SUM
                                                            FROM BUYING_REQUEST BR LEFT JOIN USERS W ON BR.WORKER_ID=W.ID,COMPANIES C WHERE BR.COMPANY_ID=C.ID {0} ORDER BY BR.ID {1} OFFSET @PAGE*@PAGE_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY";

        public static string workerBuyingRequestHardwareSelectCommand = @"SELECT BRH.ID AS ID,H.CATEGORY_ID AS CATEGORY_ID, H.NAME AS HARDWARE, H.ID AS HARDWARE_ID, BRH.QUANTITY AS QUANTITY, BRH.PRICE AS PRICE, BRH.SALE AS SALE,BRH.SALE AS SALE, BRH.PRICE*(100-BRH.SALE)/100*BRH.QUANTITY AS TOTAL,H.ID AS HARDWARE_ID,(SELECT COMPANY_ID FROM BUYING_REQUEST WHERE ID=@REQUEST_ID) AS COMPANY_ID
                                                                    FROM HARDWARE H, BUYING_REQUEST_HARDWARE AS BRH
                                                                    WHERE H.ID=BRH.HARDWARE_ID AND BRH.BUYING_REQUEST_ID=@REQUEST_ID";

        public static string getAllBuyingRequestCommentsByRequestID = "SELECT RC.*, U.NAME + ' ' + U.SURNAME AS USER_NAME,U.ID AS USER_ID FROM BUYING_REQUEST_COMMENTS RC, USERS U WHERE RC.FROM_USER_ID=U.ID AND RC.REQUEST_ID=@REQUEST_ID  ORDER BY ID DESC";
        public static string addNewBuyingRequestComment = @"INSERT INTO BUYING_REQUEST_COMMENTS(REQUEST_ID,COMMENT_TEXT,COMMENT_DATE,FROM_USER_ID)
                                                                        VALUES(@REQUEST_ID,@COMMENT_TEXT,GETDATE(),@FROM_USER_ID)";


        public static string getAllBuyingRequestForCurator = @"SELECT BR.*,C.NAME AS COMPANY_NAME,
                                                            (CASE
                                                            WHEN USE_DEFAULT_ADDRESS = 1
                                                            THEN
                                                            (SELECT ADDRESS FROM USERS WHERE ID = @USER_ID)
                                                            ELSE
                                                            NEW_DELIVERY_ADDRESS END) AS ADDRESS
                                                            FROM BUYING_REQUEST BR,COMPANIES C WHERE BR.COMPANY_ID=C.ID AND BR.CLIENT_ID IN (SELECT ID FROM USERS WHERE COMPANY_ID=@COMPANY_ID) ORDER BY BR.ID DESC";

        //Operator Service problem
        public static string operatorProblemSelectCommand = @"SELECT HC.NAME AS HARDWARE_CATEGORY_NAME, W.NAME + ' ' + W.SURNAME AS WORKER_NAME,
                                                          HSC.NAME AS HARDWARE_SUBCATEGORY_NAME, HM.NAME AS HARDWARE_MANUFACTURER_NAME,
                                                          CP.*,CL.NAME AS CLIENT_NAME,C.NAME AS COMPANY_NAME, CB.NAME AS COMPANY_BRANCH_NAME,H.NAME AS HARDWARE_NAME,CP.RESULT_DATE AS SERVICE_DATE 
                                                          FROM COMPANIES C, COMPANY_BRANCH CB, HARDWARE H, USERS CL,
                                                          HARDWARE_CATEGORY HC, HARDWARE_MANUFACTURER HM, HARDWARE_CATEGORY HSC, CLIENT_PROBLEM CP LEFT JOIN USERS W ON CP.WORKER_ID=W.ID 
                                                          WHERE CL.ID=CP.CLIENT_ID AND CP.HARDWARE_ID=H.ID AND H.MANUFACTURER_ID=HM.ID  AND H.CATEGORY_ID=HSC.ID 
                                                          AND HSC.CATEGORY_ID=HC.ID AND CP.COMPANY_BRANCH_ID=CB.ID AND C.ID=CB.COMPANY_ID";
        public static string getUserListOrderByName = "SELECT ID, NAME + ' ' + SURNAME AS USER_NAME  FROM USERS WHERE COMPANY_ID IS NULL AND ROLE_ID=(SELECT ID FROM USER_ROLE WHERE NAME='client') ORDER BY NAME ASC, SURNAME ASC";


        public static string getUsersByAllParameters = "SELECT ID, NAME + ' ' + SURNAME AS NAME FROM USERS WHERE POSITION_ID=@POSITION_ID AND COMPANY_ID=@COMPANY_ID AND BRANCH_ID=@BRANCH_ID AND DIVISION_ID=@DIVISION_ID ORDER BY NAME ASC, SURNAME ASC";
        public static string getClientProblemById = "SELECT * FROM CLIENT_PROBLEM WHERE ID=@PROBLEM_ID";
        public static string updateClientProblemSetWorker = "UPDATE CLIENT_PROBLEM SET WORKER_ID=@WORKER_ID,LAST_UPDATED_BY=@LAST_UPDATED_BY,STATUS=@STATUS WHERE ID=@ID";


        //Operator add user
        public static string operatorAddUsers = @"INSERT INTO USERS(NAME,SURNAME,TELEPHONE,ADDRESS,BIRTHDATE,EMAIL,PASSWORD,ROLE_ID,COMPANY_ID,DIVISION_ID,BRANCH_ID,POSITION_ID,ACTIVE,CODE)
                                                     VALUES(@NAME,@SURNAME,@TELEPHONE,@ADDRESS,@BIRTHDATE,@EMAIL,@PASSWORD,(SELECT ID FROM USER_ROLE WHERE NAME='client'),null,null,null,null,1,'')";
        
        public static string operatorSelectUsersDetails = @"SELECT * FROM USERS WHERE COMPANY_ID IS NULL AND ROLE_ID=(SELECT ID FROM USER_ROLE WHERE NAME='client') ORDER BY ID DESC";
        public static string operatorSelectUsersDetailsByUserName = @"SELECT U.*, C.NAME AS COMPANY_NAME, CD.NAME AS COMPANY_DIVISION_NAME, CP.NAME AS COMPANY_POSITION_NAME, CB.NAME AS COMPANY_BRANCH_NAME,R.NAME AS ROLE_NAME 
                                                    FROM USERS U LEFT JOIN COMPANIES C ON U.COMPANY_ID=C.ID LEFT JOIN COMPANY_DIVISION CD ON U.DIVISION_ID=CD.ID LEFT JOIN COMPANY_POSITION CP ON CP.ID=U.POSITION_ID  LEFT JOIN COMPANY_BRANCH CB ON U.BRANCH_ID=CB.ID, USER_ROLE R WHERE
                                                    U.ROLE_ID=R.ID AND U.EMAIL=@EMAIL";
        public static string updateClientRequestSetWorker = @"UPDATE CLIENT_REQUEST SET WORKER_ID=@WORKER_ID,STATUS=@STATUS WHERE ID=@ID";
        public static string updateClientRequestUpdateStatus = @"UPDATE CLIENT_REQUEST SET STATUS=@STATUS WHERE ID=@ID";
        //Operator Client request
        public static string getAllClientRequestByCompanyId = "SELECT CR.*,C.NAME AS COMPANY_NAME,CB.NAME AS COMPANY_BRANCH_NAME FROM CLIENT_REQUEST CR,COMPANIES C,COMPANY_BRANCH CB WHERE C.ID=@COMPANY_ID AND CR.COMPANY_BRANCH_ID=CB.ID AND CB.COMPANY_ID=C.ID AND CR.STATUS<>'Waiting for curator approval' AND CR.STATUS<>'Declined by curator'  ORDER BY CR.ID DESC";
        public static string getAllClientRequestByCompanyIdAndUserId = "SELECT CR.*,C.NAME AS COMPANY_NAME,CB.NAME AS COMPANY_BRANCH_NAME FROM CLIENT_REQUEST CR,COMPANIES C,COMPANY_BRANCH CB WHERE C.ID=@COMPANY_ID AND CR.COMPANY_BRANCH_ID=CB.ID AND CB.COMPANY_ID=C.ID AND CR.USER_ID=@USER_ID ORDER BY CR.ID DESC";
        public static string getAllCompanyClientRequestByCompanyId = "SELECT CR.*,C.NAME AS COMPANY_NAME,CB.NAME AS COMPANY_BRANCH_NAME FROM CLIENT_REQUEST CR,COMPANIES C,COMPANY_BRANCH CB WHERE CR.COMPANY_BRANCH_ID=CB.ID AND CB.COMPANY_ID=C.ID AND CR.USER_ID IN (SELECT ID FROM USERS WHERE COMPANY_ID=@COMPANY_ID) ORDER BY CR.ID DESC";

        public static string selectHardwareCategoryWhereCategoryNull= "SELECT ID,NAME FROM HARDWARE_CATEGORY WHERE CATEGORY_ID IS NULL";

        //Operator Buying Request
        public static string getAllBuyingRequestByUserIdAndCompanyId = @"SELECT BR.*,C.NAME AS COMPANY_NAME,
                                                            (CASE
                                                            WHEN USE_DEFAULT_ADDRESS = 1
                                                            THEN
                                                            (SELECT ADDRESS FROM USERS WHERE ID = @USER_ID)
                                                            ELSE
                                                            NEW_DELIVERY_ADDRESS END) AS ADDRESS,
                                                            U.ID AS USER_ID,
                                                            U.NAME AS USER_NAME
                                                            FROM USERS U, BUYING_REQUEST BR,COMPANIES C WHERE BR.COMPANY_ID=C.ID AND BR.CLIENT_ID=U.ID AND BR.CLIENT_ID=@USER_ID AND C.ID=@COMPANY_ID ORDER BY BR.ID DESC";
        public static string getAllBuyingRequestByCompanyId = @"SELECT BR.*,C.NAME AS COMPANY_NAME,
                                                            (CASE
                                                            WHEN USE_DEFAULT_ADDRESS = 1
                                                            THEN
                                                            (SELECT ADDRESS FROM USERS WHERE ID = BR.CLIENT_ID)
                                                            ELSE
                                                            NEW_DELIVERY_ADDRESS END) AS ADDRESS,
                                                            U.ID AS USER_ID,
                                                            U.NAME AS USER_NAME
                                                            FROM USERS U, BUYING_REQUEST BR,COMPANIES C WHERE BR.COMPANY_ID=C.ID AND BR.CLIENT_ID=U.ID AND C.ID=@COMPANY_ID ORDER BY BR.ID DESC";
        public static string getAllBuyingRequestByCompanyIdAndWorkerId = @"SELECT BR.*,C.NAME AS COMPANY_NAME,
                                                            (CASE
                                                            WHEN USE_DEFAULT_ADDRESS = 1
                                                            THEN
                                                            (SELECT ADDRESS FROM USERS WHERE ID = BR.CLIENT_ID)
                                                            ELSE
                                                            NEW_DELIVERY_ADDRESS END) AS ADDRESS,
                                                            U.ID AS USER_ID,
                                                            U.NAME AS USER_NAME
                                                            FROM USERS U, BUYING_REQUEST BR,COMPANIES C WHERE BR.COMPANY_ID=C.ID AND BR.CLIENT_ID=U.ID AND C.ID=@COMPANY_ID AND BR.WORKER_ID=@WORKER_ID ORDER BY BR.ID DESC";
        public static string getAllBuyingRequestByCompanyIdAndWorkerIdAndClientId = @"SELECT BR.*,C.NAME AS COMPANY_NAME,
                                                            (CASE
                                                            WHEN USE_DEFAULT_ADDRESS = 1
                                                            THEN
                                                            (SELECT ADDRESS FROM USERS WHERE ID = BR.CLIENT_ID)
                                                            ELSE
                                                            NEW_DELIVERY_ADDRESS END) AS ADDRESS,
                                                            U.ID AS USER_ID,
                                                            U.NAME AS USER_NAME
                                                            FROM USERS U, BUYING_REQUEST BR,COMPANIES C WHERE BR.COMPANY_ID=C.ID AND BR.CLIENT_ID=U.ID AND C.ID=@COMPANY_ID AND BR.WORKER_ID=@WORKER_ID AND BR.CLIENT_ID=@USER_ID ORDER BY BR.ID DESC";


        public static string getAllBuyingRequestById = @"SELECT BR.*,C.NAME AS COMPANY_NAME, W.NAME  + ' ' + W.SURNAME AS WORKER_NAME,
                                                            (CASE
                                                            WHEN USE_DEFAULT_ADDRESS = 1
                                                            THEN
                                                            U.ADDRESS
                                                            ELSE
                                                            NEW_DELIVERY_ADDRESS END) AS ADDRESS,
                                                            U.ID AS USER_ID,
                                                            U.NAME AS USER_NAME,
                                                        ISNULL((SELECT SUM(PRICE*(100-ISNULL(SALE,0))/100)*SUM(QUANTITY) FROM BUYING_REQUEST_HARDWARE WHERE BUYING_REQUEST_ID=@REQUEST_ID),0) AS TOTAL_SUM
                                                            FROM USERS U, BUYING_REQUEST BR LEFT JOIN USERS W ON BR.WORKER_ID=W.ID,COMPANIES C WHERE BR.COMPANY_ID=C.ID AND BR.CLIENT_ID=U.ID AND BR.ID=@REQUEST_ID ORDER BY BR.ID DESC";
        public static string updateBuyingRequestByWorkerIdAndStatus = "UPDATE BUYING_REQUEST SET WORKER_ID=@WORKER_ID,STATUS=@STATUS WHERE ID=@ID";


        public static string updateBuyingRequestStatus = "UPDATE BUYING_REGUEST SET STATUS=@STATUS WHERE ID=@ID";
        //Add worker Problem
        public static string setServiceResultByWorker = @"UPDATE CLIENT_PROBLEM SET RESULT_DESC=@RESULT_DESC,
                                                                                    RESULT_DATE=GETDATE(),
                                                                                    SERVICE_DATE=@SERVICE_DATE,
                                                                                    PRICE=@PRICE,
                                                                                    WORK_DESC=@WORK_DESC,
                                                                                    LAST_UPDATED_BY=@LAST_UPDATED_BY,STATUS=@STATUS WHERE ID=@ID";
        public static string setServiceResultComplete = @"UPDATE CLIENT_PROBLEM SET LAST_UPDATED_BY=@LAST_UPDATED_BY,STATUS=@STATUS WHERE ID=@ID";
        

        //Worker Request
        public static string getAllClientRequestByCompanyIdAndWorkerID = "SELECT CR.*,C.NAME AS COMPANY_NAME,CB.NAME AS COMPANY_BRANCH_NAME,U.NAME + ' ' + U.SURNAME AS USER_NAME, U.ID AS USER_ID FROM CLIENT_REQUEST CR,COMPANIES C,COMPANY_BRANCH CB,USERS U WHERE CR.USER_ID=U.ID AND C.ID=@COMPANY_ID AND (CR.WORKER_ID=@WORKER_ID OR CR.ADDED_BY_USER=@WORKER_ID) AND CR.COMPANY_BRANCH_ID=CB.ID AND CB.COMPANY_ID=C.ID ORDER BY CR.ID DESC";
        public static string getAllClientRequestByCompanyIdAndUserIdAndWorkerId = "SELECT CR.*,C.NAME AS COMPANY_NAME,CB.NAME AS COMPANY_BRANCH_NAME,U.NAME + ' ' + U.SURNAME AS USER_NAME, U.ID AS USER_ID FROM CLIENT_REQUEST CR,COMPANIES C,COMPANY_BRANCH CB,USERS U WHERE CR.USER_ID=U.ID AND C.ID=@COMPANY_ID AND CR.COMPANY_BRANCH_ID=CB.ID AND (CR.WORKER_ID=@WORKER_ID OR CR.ADDED_BY_USER=@WORKER_ID) AND CB.COMPANY_ID=C.ID AND CR.USER_ID=@USER_ID ORDER BY CR.ID DESC";

        

        //Courier Buying request
        public static string updateBuyingRequestSetStatusCompleted = "UPDATE BUYING_REQUEST SET STATUS=@STATUS,COMPLETED=@COMPLETED WHERE ID=@ID";


        //Branch head request
        public static string getAllClientRequestByCompanyIdAndBranchId = "SELECT CR.*,C.NAME AS COMPANY_NAME,CB.NAME AS COMPANY_BRANCH_NAME FROM CLIENT_REQUEST CR,COMPANIES C,COMPANY_BRANCH CB WHERE C.ID=@COMPANY_ID AND CR.COMPANY_BRANCH_ID=CB.ID AND CB.COMPANY_ID=C.ID AND CB.ID=@BRANCH_ID ORDER BY CR.ID DESC";
        public static string getAllClientRequestByCompanyIdAndBranchIdAndUserId = "SELECT CR.*,C.NAME AS COMPANY_NAME,CB.NAME AS COMPANY_BRANCH_NAME FROM CLIENT_REQUEST CR,COMPANIES C,COMPANY_BRANCH CB WHERE C.ID=@COMPANY_ID AND CR.COMPANY_BRANCH_ID=CB.ID AND CB.COMPANY_ID=C.ID AND CR.USER_ID=@USER_ID AND CB.ID=@BRANCH_ID ORDER BY CR.ID DESC";
        public static string getAllBuyingRequestByCompanyIdAndBranchId = @"SELECT BR.*,C.NAME AS COMPANY_NAME,
                                                            (CASE
                                                            WHEN USE_DEFAULT_ADDRESS = 1
                                                            THEN
                                                            (SELECT ADDRESS FROM USERS WHERE ID = BR.CLIENT_ID)
                                                            ELSE
                                                            NEW_DELIVERY_ADDRESS END) AS ADDRESS
                                                            FROM BUYING_REQUEST BR,COMPANIES C WHERE BR.COMPANY_ID=C.ID  AND C.ID=@COMPANY_ID AND BR.WORKER_ID IN (SELECT ID FROM USERS WHERE BRANCH_ID=@BRANCH_ID) ORDER BY BR.ID DESC";
        public static string getAllBuyingRequestByUserIdAndCompanyIdAndBranchID = @"SELECT BR.*,C.NAME AS COMPANY_NAME,
                                                            (CASE
                                                            WHEN USE_DEFAULT_ADDRESS = 1
                                                            THEN
                                                            (SELECT ADDRESS FROM USERS WHERE ID = @USER_ID)
                                                            ELSE
                                                            NEW_DELIVERY_ADDRESS END) AS ADDRESS
                                                            FROM BUYING_REQUEST BR,COMPANIES C WHERE BR.COMPANY_ID=C.ID AND BR.CLIENT_ID=@USER_ID  AND BR.WORKER_ID IN (SELECT ID FROM USERS WHERE BRANCH_ID=@BRANCH_ID) AND C.ID=@COMPANY_ID ORDER BY BR.ID DESC";

        //Curator problem
        public static string updateClientProblemSetApprove = "UPDATE CLIENT_PROBLEM SET LAST_UPDATED_BY=@LAST_UPDATED_BY,STATUS=@STATUS WHERE ID=@ID";

        //CompanyAdmin
        public static string getHardwareByCompanyID = @"SELECT H.*,HC.NAME AS CATEGORY_NAME,C.NAME AS COMPANY_NAME,C.LOGO AS COMPANY_LOGO,
                                                        (SELECT TOP(1) HARDWARE_IMAGE FROM HARDWARE_PICTURES WHERE HARDWARE_ID=H.ID ORDER BY ID ASC) AS HARDWARE_IMAGE
                                                        FROM HARDWARE H, HARDWARE_CATEGORY HC, COMPANIES C WHERE
                                                        H.CATEGORY_ID=HC.ID AND HC.COMPANY_ID=C.ID AND
                                                        C.ACTIVE=1 AND HC.ACTIVE=1 AND H.ACTIVE=1 AND HC.COMPANY_ID=@COMPANY_ID ORDER BY H.ID DESC";

        public static string getHardwareByCompanyIDPaging = @"SELECT H.*,HC.NAME AS CATEGORY_NAME,C.ID AS COMPANY_ID,C.NAME AS COMPANY_NAME,C.LOGO AS COMPANY_LOGO,
                                                        (SELECT TOP(1) HARDWARE_IMAGE FROM HARDWARE_PICTURES WHERE HARDWARE_ID=H.ID ORDER BY ID ASC) AS HARDWARE_IMAGE
                                                        FROM HARDWARE H, HARDWARE_CATEGORY HC, COMPANIES C WHERE
                                                        H.CATEGORY_ID=HC.ID AND HC.COMPANY_ID=C.ID AND
                                                        C.ACTIVE=1 AND HC.ACTIVE=1 AND H.ACTIVE=1 AND HC.COMPANY_ID=@COMPANY_ID ORDER BY H.ID DESC OFFSET @PAGE*@PAGE_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY";

        //Company Admin Company stock
        public static string getAllCompanyStock = @"SELECT CSP.*, C.NAME AS COMPANY_NAME, H.NAME AS HARDWARE_NAME, MT.NAME AS MEASURE_TYPE_NAME FROM COMPANY_STOCK_PRODUCTS CSP, COMPANIES C, HARDWARE H, MEASURE_TYPE MT
                                                    WHERE CSP.PRODUCT_ID=H.ID AND CSP.COMPANY_ID=C.ID AND CSP.MEASURE_TYPE_ID=MT.ID AND C.ID=@COMPANY_ID ORDER BY CSP.ID DESC";
        public static string getAllCompanyStockById = "SELECT * FROM COMPANY_STOCK_PRODUCTS WHERE ID=@ID";
        public static string updateCompanyStockProducts = "UPDATE COMPANY_STOCK_PRODUCTS SET COMPANY_ID=@COMPANY_ID, PRODUCT_ID=@PRODUCT_ID, PRODUCT_QUANTITY=@PRODUCT_QUANTITY, MEASURE_TYPE_ID=@MEASURE_TYPE_ID WHERE ID=@ID";
        public static string addCompanyStockProducts = @"DECLARE @STOCK_ID INT
SET @STOCK_ID = ISNULL((SELECT ID FROM COMPANY_STOCK_PRODUCTS WHERE PRODUCT_ID=@PRODUCT_ID),0)
IF @STOCK_ID>0
BEGIN
UPDATE COMPANY_STOCK_PRODUCTS SET COMPANY_ID=@COMPANY_ID, PRODUCT_ID=@PRODUCT_ID, PRODUCT_QUANTITY=PRODUCT_QUANTITY+@PRODUCT_QUANTITY, MEASURE_TYPE_ID=@MEASURE_TYPE_ID WHERE ID = @STOCK_ID
END
ELSE
BEGIN
INSERT INTO COMPANY_STOCK_PRODUCTS(PRODUCT_ID, PRODUCT_QUANTITY, MEASURE_TYPE_ID, COMPANY_ID) VALUES(@PRODUCT_ID,@PRODUCT_QUANTITY,@MEASURE_TYPE_ID,@COMPANY_ID)
END
";
/// Hardware Category Manufacturer
        public static string getAllHardwareCategoryManufacturer = @"SELECT HCM.*, HC.NAME AS HARDWARE_CATEGORY_NAME, HM.NAME AS HARDWARE_MANUFACTURER_NAME, C.NAME AS COMPANY_NAME
                                                            FROM COMPANIES C, HARDWARE_CATEGORY_MANUFACTURE HCM, HARDWARE_CATEGORY HC, HARDWARE_MANUFACTURER HM WHERE
                                                           HCM.CATEGORY_ID=HC.ID AND HCM.MANUFACTURER_ID=HM.ID AND HC.COMPANY_ID=C.ID AND HM.COMPANY_ID=C.ID ORDER BY HCM.ID DESC";
        
        
        public static string getAllHardwareCategoryManufacturerByCompanyID = @"SELECT HCM.*, HC.NAME AS HARDWARE_CATEGORY_NAME, HM.NAME AS HARDWARE_MANUFACTURER_NAME, C.NAME AS COMPANY_NAME
                                                            FROM COMPANIES C, HARDWARE_CATEGORY_MANUFACTURE HCM, HARDWARE_CATEGORY HC, HARDWARE_MANUFACTURER HM WHERE
                                                           HCM.CATEGORY_ID=HC.ID AND HCM.MANUFACTURER_ID=HM.ID AND HC.COMPANY_ID=C.ID AND HM.COMPANY_ID=C.ID AND C.ID=@COMPANY_ID ORDER BY HM.ID DESC";

        public static string getAllHardwareCategoryManufacturerByCompanyIDPaging = @"SELECT HCM.*, HC.NAME AS HARDWARE_CATEGORY_NAME, HM.NAME AS HARDWARE_MANUFACTURER_NAME, C.NAME AS COMPANY_NAME
                                                            FROM COMPANIES C, HARDWARE_CATEGORY_MANUFACTURE HCM, HARDWARE_CATEGORY HC, HARDWARE_MANUFACTURER HM WHERE
                                                           HCM.CATEGORY_ID=HC.ID AND HCM.MANUFACTURER_ID=HM.ID AND HC.COMPANY_ID=C.ID AND HM.COMPANY_ID=C.ID AND C.ID=@COMPANY_ID ORDER BY HM.ID DESC OFFSET @PAGE*@PAGE_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY";

        public static string getHardwareCategoryManufacaturerById = @"SELECT HCM.*, HC.NAME AS HARDWARE_CATEGORY_NAME, HM.NAME AS HARDWARE_MANUFACTURER_NAME, C.NAME AS COMPANY_NAME
                                                            FROM COMPANIES C, HARDWARE_CATEGORY_MANUFACTURE HCM, HARDWARE_CATEGORY HC, HARDWARE_MANUFACTURER HM WHERE
                                                           HCM.CATEGORY_ID=HC.ID AND HCM.MANUFACTURER_ID=HM.ID AND HC.COMPANY_ID=C.ID AND HM.COMPANY_ID=C.ID AND C.ID=@COMPANY_ID AND HM.ID=@ID ORDER BY HM.ID DESC";


        public static string addHardwareCategoryManufacturer = "INSERT INTO HARDWARE_CATEGORY_MANUFACTURE(CATEGORY_ID,MANUFACTURER_ID) VALUES(@CATEGORY_ID,@MANUFACTURER_ID)";
        public static string updateHardwareCategoryManufacturer = "UPDATE HARDWARE_CATEGORY_MANUFACTURE SET CATEGORY_ID=@CATEGORY_ID, MANUFACTURER_ID=@MANUFACTURER_ID WHERE ID=@ID";
        public static string deleteHardwareCategoryManufacturer = "DELETE FROM HARDWARE_CATEGORY_MANUFACTURE WHERE ID=@ID";
        public static string deleteHardwareCategoryManufacturerByManufacturerId = "DELETE FROM HARDWARE_CATEGORY_MANUFACTURE WHERE MANUFACTURER_ID=@ID AND @COMPANY_ID=(SELECT COMPANY_ID FROM HARDWARE_MANUFACTURER WHERE ID=@ID)";


        /*  public static string getHardwareCategoryByHardwareId = @"DECLARE @HARDWARE_CATEGORY INT
  SET @HARDWARE_CATEGORY=ISNULL((SELECT CATEGORY_ID FROM HARDWARE WHERE ID=@HARDWARE_ID),0)
  SELECT * FROM HARDWARE_CATEGORY WHERE ID IN (SELECT CATEGORY_ID FROM HARDWARE_CATEGORY WHERE ID=@HARDWARE_CATEGORY)";*/

        //Global Parameters
        public static string getGlobalParameters = "SELECT * FROM REGISTRATION_PARAMETERS ORDER BY ID DESC";
        public static string getGlobalParametersByID = "SELECT * FROM REGISTRATION_PARAMETERS WHERE ID=@ID ORDER BY ID DESC";
        public static string addGlobalParameters = @"DECLARE @regId int
                                                set @regId=(SELECT TOP 1 ID FROM REGISTRATION_PARAMETERS ORDER BY ID DESC)
                                                IF @regId>0
                                                BEGIN
                                                UPDATE REGISTRATION_PARAMETERS SET REGISTRATION_CONFIRM=@REGISTRATION_CONFIRM WHERE ID=(SELECT TOP 1 ID FROM REGISTRATION_PARAMETERS ORDER BY ID DESC)
                                                END
                                                ELSE
                                                BEGIN
                                                INSERT INTO REGISTRATION_PARAMETERS(REGISTRATION_CONFIRM) VALUES(@REGISTRATION_CONFIRM)
                                                END";
        public static string updateGloablParameters = "UPDATE REGISTRATION_PARAMETERS SET REGISTRATION_CONFIRM=@REGISTRATION_CONFIRM WHERE ID=@ID";


        //Buying request hardware Info
        public static string getAllBuyingRequestHardwareInfo = @"SELECT BRHI.*, H.NAME AS HARDWARE_NAME,
                                                                  (CASE WHEN BRHI.SOLD_TO_COMPANY=1
                                                                  THEN
                                                                   (SELECT NAME FROM COMPANIES WHERE ID=BRHI.CLIENT_ID)
                                                                  ELSE
                                                                    (SELECT NAME + ' ' + SURNAME AS NAME FROM USERS WHERE ID=BRHI.CLIENT_ID)
																	END) AS CLIENT_NAME, C.NAME AS COMPANY_NAME
                                                                   FROM BUYING_REQUEST_HARDWARE_INFO BRHI, HARDWARE H, COMPANIES C WHERE BRHI.HARDWARE_ID=H.ID AND BRHI.COMPANY_ID=@COMPANY_ID";

        public static string getAllBuyingRequestHardwareInfoByClientId = @"SELECT BRHI.*, H.NAME AS HARDWARE_NAME,
                                                                  (CASE WHEN BRHI.SOLD_TO_COMPANY=1
                                                                  THEN
                                                                   (SELECT NAME FROM COMPANIES WHERE ID=BRHI.CLIENT_ID)
                                                                  ELSE
                                                                    (SELECT NAME + ' ' + SURNAME AS NAME FROM USERS WHERE ID=BRHI.CLIENT_ID)
																	END) AS CLIENT_NAME, C.NAME AS COMPANY_NAME
                                                                   FROM BUYING_REQUEST_HARDWARE_INFO BRHI, HARDWARE H, COMPANIES C WHERE BRHI.HARDWARE_ID=H.ID AND CLIENT_ID=@CLIENT_ID ORDER BY BUYING_DATE DESC";
        public static string getAllBuyingRequestHardwareInfoByClientIdPagination = @"SELECT TOP(@PAGE_SIZE) BRHI.*, H.NAME AS HARDWARE_NAME,
                                                                  (CASE WHEN BRHI.SOLD_TO_COMPANY=1
                                                                  THEN
                                                                   (SELECT NAME FROM COMPANIES WHERE ID=BRHI.CLIENT_ID)
                                                                  ELSE
                                                                    (SELECT NAME + ' ' + SURNAME AS NAME FROM USERS WHERE ID=BRHI.CLIENT_ID)
																	END) AS CLIENT_NAME, C.NAME AS COMPANY_NAME
                                                                   FROM BUYING_REQUEST_HARDWARE_INFO BRHI, HARDWARE H, COMPANIES C WHERE BRHI.HARDWARE_ID=H.ID AND CLIENT_ID=@CLIENT_ID AND (BRHI.ID<@FROM_ID OR @FROM_ID=0) ORDER BY BUYING_DATE DESC";


        public static string getAllBuyingRequestHardwareInfoById = "SELECT * FROM BUYING_REQUEST_HARDWARE_INFO WHERE ID=@ID";
        public static string addBuyingRequestHardwareInfo = @"INSERT INTO BUYING_REQUEST_HARDWARE_INFO(HARDWARE_ID,HAVE_GUARANTEE,GUARANTEE_BEGIN_DATE,GUARANTEE_END_DATE,SERIAL_NUMBER,CLIENT_ID,SOLD_TO_COMPANY,COMPANY_ID)
                                                                VALUES (@HARDWARE_ID,@HAVE_GUARANTEE,@GUARANTEE_BEGIN_DATE,@GUARANTEE_END_DATE,@SERIAL_NUMBER,@CLIENT_ID,@SOLD_TO_COMPANY,@COMPANY_ID);
                                                                UPDATE COMPANY_STOCK_PRODUCTS SET PRODUCT_QUANTITY=(PRODUCT_QUANTITY-@QUANTITY) WHERE COMPANY_ID=@COMPANY_ID AND PRODUCT_ID=@HARDWARE_ID";
        public static string deleteFromBuyingRequestHardwareInfo = "DELETE FROM BUYING_REQUEST_HARDWARE_INFO WHERE ID=@ID";
        public static string deleteFromBuyingRequestHardwareRequestId = "DELETE FROM BUYING_REQUEST_HARDWARE WHERE BUYING_REQUEST_ID=@REQUEST_ID";
        public static string updateBuyingRequestHardwareInfo = "UPDATE BUYING_REQUEST_HARDWARE_INFO SET HARDWARE_ID=@HARDWARE_ID,HAVE_GUARANTEE=@HAVE_GUARANTEE,GUARANTEE_BEGIN_DATE=@GUARANTEE_BEGIN_DATE,GUARANTEE_END_DATE=@GUARANTEE_END_DATE,SERIAL_NUMBER=@SERIAL_NUMBER,CLIENT_ID=@CLIENT_ID,SOLD_TO_COMPANY=@SOLD_TO_COMPANY,COMPANY_ID=@COMPANY_ID WHERE ID=@ID";


        public static string getAllBuyingRequestHardwareInfoByProblemID = @"SELECT BRHI.* FROM BUYING_REQUEST_HARDWARE_INFO BRHI, CLIENT_PROBLEM CP WHERE CP.ID=@PROBLEM_ID AND CP.HARDWARE_ID=BRHI.HARDWARE_ID AND CP.SERIAL_NUMBER=BRHI.SERIAL_NUMBER";


        //Azericard Payment

        public static string insertNewOrder = "INSERT INTO PAYMENT_ORDER(AMOUNT,CURRENCY,REQUEST_ID,ORDER_NUMBER) VALUES(@AMOUNT,'AZN',@REQUEST_ID,@REQUEST_ID);SELECT SCOPE_IDENTITY();";
        public static string getAmountFromPaymentOrderById = "SELECT *  FROM PAYMENT_ORDER WHERE ID=@ID";
        public static string updatePaymentOrder = "UPDATE PAYMENT_ORDER SET RRN=@RRN, INT_REF=@INT_REF, RC=@RC, ACTION=@ACTION, ORDER_NUMBER=@ORDER_NUMBER WHERE ID=@ID";

        ////////////////////////////////////////////////////////////////////////////////////////////////////////// 
        /////BackEndControlles

        public static string selectAllShops = @"SELECT C.*, (SELECT COUNT(ID) FROM HARDWARE WHERE ACTIVE=1 AND CATEGORY_ID IN 
                                                (SELECT ID FROM HARDWARE_CATEGORY WHERE COMPANY_ID=C.ID)) AS PRODUCT_QUANTITY
                                                FROM COMPANIES C WHERE ACTIVE=1";
        public static string selectAllShops2 = @" select(select 
               stor.STORE_GUID StoreGuid,
               stor.[NAME] Name,
               stor.[DOMAIN] Domain,
	           stor.TENANT_ID TenantId,
               (select COUNT(PRODUCT_ID) from NEW_PRODUCT where IS_ACTIVE=1 and IS_VISIBLE=1 AND TENANT_ID=stor.TENANT_ID) ProductCount,
               stor.WORK_TIME_END WorkEndTime,
			   stor.WORK_TIME_START WorkStartTime,
	          (select adr.[ADDRESS] [Address],
	          adr.[LONGITUDE] Longitude,adr.[LATITUDE] Latitude
              from NEW_ADDRESS adr
              where adr.[STORE_ID]=stor.[STORE_ID] for json path)[Addresses],
	          (select cnt.[TEXT] [Text],cnt.[NOTE] Note
	          from NEW_CONTACT cnt
	          where cnt.[STORE_ID]=stor.[STORE_ID] for json path)[Contacts],
	          (select  UF.UPLOAD_FILE_ID Id,
	          (UF.PATH + UF.FILENAME + UF.EXTENSION) FilePath from NEW_UPLOAD_FILE UF
	          where UF.UPLOAD_FILE_ID = (case when stor.MAIN_LOGO_IMG_ID is not null then  stor.MAIN_LOGO_IMG_ID else stor.LOGO_IMG_ID end) for json path)LogoImage	
              from NEW_STORE as stor where stor.IS_ACTIVE=1 and stor.IS_ALLOWED=1 for json path)Json";

        public static string selectHardwareManufacturuMainPage= @"SELECT HM.*, (SELECT COUNT(ID) FROM HARDWARE WHERE MANUFACTURER_ID=HM.ID) AS PRODUCT_QUANTITY
                                                FROM HARDWARE_MANUFACTURER HM WHERE ACTIVE=1 AND HM.SHOW_ON_MAIN=1";
        public static string getAllPromotions = "SELECT PT.ID AS ID,PT.TEXT AS TEXT, PT.LINK AS LINK FROM PROMOTIONS_TEXT PT, PROMOTIONS P WHERE GETDATE() BETWEEN P.DATE_FROM AND P.DATE_TO AND PT.LANGUAGE_ID=(SELECT ID FROM LANGUAGES WHERE CODE=@CODE) AND PT.PROMOTION_ID=P.ID";

        public static string getAllProductsForMain = @"SELECT TOP(10) H.*,HC.NAME AS CATEGORY_NAME,C.NAME AS COMPANY_NAME,C.LOGO AS COMPANY_LOGO, C.ID AS COMPANY_ID,
                                                        (SELECT TOP(1) HARDWARE_IMAGE FROM HARDWARE_PICTURES WHERE HARDWARE_ID=H.ID ORDER BY ID ASC) AS HARDWARE_IMAGE
                                                        FROM HARDWARE H, HARDWARE_CATEGORY HC, COMPANIES C WHERE
                                                        H.CATEGORY_ID=HC.ID AND HC.COMPANY_ID=C.ID AND
                                                        C.ACTIVE=1 AND HC.ACTIVE=1 AND H.ACTIVE=1 ORDER BY H.ID DESC";
        public static string getAllProductsForPromotion = @"SELECT  TOP(5) H.*,HC.NAME AS CATEGORY_NAME,C.NAME AS COMPANY_NAME,C.LOGO AS COMPANY_LOGO,
                                                        (SELECT TOP(1) HARDWARE_IMAGE FROM HARDWARE_PICTURES WHERE HARDWARE_ID=H.ID ORDER BY ID ASC) AS HARDWARE_IMAGE
                                                        FROM HARDWARE H, HARDWARE_CATEGORY HC, COMPANIES C WHERE
                                                        H.CATEGORY_ID=HC.ID AND HC.COMPANY_ID=C.ID AND
                                                        C.ACTIVE=1 AND HC.ACTIVE=1 AND H.ACTIVE=1 AND HC.COMPANY_ID=@SHOP_ID ORDER BY ID DESC";
        public static string getAllProductsForShopMain = @"SELECT  TOP(30) H.*,HC.NAME AS CATEGORY_NAME,C.NAME AS COMPANY_NAME,C.LOGO AS COMPANY_LOGO,
                                                        (SELECT TOP(1) HARDWARE_IMAGE FROM HARDWARE_PICTURES WHERE HARDWARE_ID=H.ID ORDER BY ID ASC) AS HARDWARE_IMAGE
                                                        FROM HARDWARE H, HARDWARE_CATEGORY HC, COMPANIES C WHERE
                                                        H.CATEGORY_ID=HC.ID AND HC.COMPANY_ID=C.ID AND
                                                        C.ACTIVE=1 AND HC.ACTIVE=1 AND H.ACTIVE=1 AND HC.COMPANY_ID=@SHOP_ID ORDER BY ID DESC";
        public static string getProductInfoById = @"SELECT H.*,HC.NAME AS CATEGORY_NAME,C.NAME AS COMPANY_NAME,C.ID AS SHOP_ID,C.LOGO AS COMPANY_LOGO,
                                                        (SELECT TOP(1) HARDWARE_IMAGE FROM HARDWARE_PICTURES WHERE HARDWARE_ID=H.ID ORDER BY ID ASC) AS HARDWARE_IMAGE
                                                        FROM HARDWARE H, HARDWARE_CATEGORY HC, COMPANIES C WHERE
                                                        H.CATEGORY_ID=HC.ID AND HC.COMPANY_ID=C.ID AND
                                                        C.ACTIVE=1 AND HC.ACTIVE=1 AND H.ACTIVE=1 AND H.ID=@ID";
        public static string getAllBasketInfo = @"SELECT B.*, H.NAME AS HARDWARE_NAME, H.ID AS HARDWARE_ID,HC.NAME AS HARDWARE_CATEGORY_NAME,H.CATEGORY_ID AS CATEGORY_ID, C.NAME AS COMPANY_NAME,C.ID AS SHOP_ID, H.PRICE AS PRICE FROM BASKET B, HARDWARE H, HARDWARE_CATEGORY HC,COMPANIES C
                                                 WHERE B.PRODUCT_ID=H.ID AND H.CATEGORY_ID=HC.ID AND B.USER_ID=@USER_ID AND HC.COMPANY_ID=C.ID";
        public static string addBasket = @"DECLARE @IS_ADDED int
                                                SET @IS_ADDED = ISNULL((SELECT TOP(1) ID FROM BASKET WHERE PRODUCT_ID=@PRODUCT_ID AND USER_ID=@USER_ID ORDER BY ID DESC),0)
                                                IF @IS_ADDED>0
                                                BEGIN
                                                UPDATE BASKET SET QUANTITY=QUANTITY+@QUANTITY WHERE PRODUCT_ID=@PRODUCT_ID AND USER_ID=@USER_ID
                                                END
                                                ELSE
                                                BEGIN
                                                INSERT INTO BASKET(USER_ID,PRODUCT_ID,QUANTITY) VALUES(@USER_ID,@PRODUCT_ID,@QUANTITY)
                                                END";
        public static string updateBasket = "UPDATE BASKET SET QUANTITY=@QUANTITY WHERE PRODUCT_ID=@PRODUCT_ID AND USER_ID=@USER_ID";
        public static string removeItemFromBasket = "DELETE FROM BASKET WHERE PRODUCT_ID=@PRODUCT_ID AND USER_ID=@USER_ID";
        public static string selectAllHardwareCategoriesByCompanyId = "SELECT * FROM HARDWARE_CATEGORY  WHERE ACTIVE=1 AND COMPANY_ID=@COMPANY_ID ORDER BY ISNULL(CATEGORY_ID,0) ASC,NAME ASC";
        public static string selectAllMainHardwareCategoriesByCompanyId = "SELECT * FROM HARDWARE_CATEGORY  WHERE ACTIVE=1 AND CATEGORY_ID IS NULL AND COMPANY_ID=@COMPANY_ID ORDER BY ISNULL(CATEGORY_ID,0) ASC,NAME ASC";
        public static string selectAllHardwareCategoriesWithParentByCompanyId = "SELECT HC.*, CH.ID AS PARENT_ID, CH.NAME AS PARENT_NAME FROM HARDWARE_CATEGORY HC LEFT JOIN HARDWARE_CATEGORY CH ON HC.CATEGORY_ID=CH.ID AND CH.ACTIVE=1 WHERE HC.ACTIVE=1 AND HC.COMPANY_ID=@COMPANY_ID ORDER BY HC.ID DESC OFFSET @PAGE*@PAGE_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY";
        public static string selectHardwareCategoryWithParentById = "SELECT HC.*, CH.ID AS PARENT_ID, CH.NAME AS PARENT_NAME FROM HARDWARE_CATEGORY HC LEFT JOIN HARDWARE_CATEGORY CH ON HC.CATEGORY_ID=CH.ID AND CH.ACTIVE=1 WHERE HC.ACTIVE=1 AND HC.COMPANY_ID=@COMPANY_ID AND HC.ID=@ID ORDER BY HC.ID DESC";
        public static string getShopInfoBySlug = "SELECT TOP(1) * FROM COMPANIES WHERE ACTIVE=1 AND NAME=@SLUG ORDER BY ID DESC";
        public static string getProductInfoBySlug = "SELECT TOP(1) * FROM HARDWARE WHERE ACTIVE=1 AND NAME=@SLUG ORDER BY ID DESC";
        public static string getCategoryInfoBySlug = "SELECT TOP(1) * FROM HARDWARE_CATEGORY WHERE ACTIVE=1 AND NAME=@SLUG ORDER BY ID DESC";
        public static string clearBasket = "DELETE FROM BASKET WHERE USER_ID=@USER_ID";

        public static string getAllUsersWithBranchByCompanyId = @"SELECT U.*, P.NAME AS POSITION_NAME, B.NAME AS BRANCH_NAME, D.NAME AS DIVISION_NAME
                                                       FROM USERS U, COMPANY_POSITION P, COMPANY_DIVISION D, COMPANY_BRANCH B
                                                        WHERE
                                                        U.POSITION_ID=P.ID AND U.BRANCH_ID= B.ID AND U.DIVISION_ID= D.ID
                                                        AND U.COMPANY_ID=@COMPANY_ID
                                                        ORDER BY B.NAME ASC ";



        public static string getAllUsersAddresses = "SELECT * FROM CLIENT_ADDRESSES WHERE CLIENT_ID=@CLIENT_ID AND ENABLED=1";
        public static string getAllUsersAddressesById = "SELECT * FROM CLIENT_ADDRESSES WHERE ID=@ID AND ENABLED=1";
        public static string addUserAddress = @"INSERT INTO CLIENT_ADDRESSES(CLIENT_ID,LABEL,ADDRESS_STRING,GOOGLEMAPS_WIDTH,GOOGLEMAPS_LENGTH,ENABLED)
                                                 VALUES(@CLIENT_ID,@LABEL,@ADDRESS_STRING,@GOOGLEMAPS_WIDTH,@GOOGLEMAPS_LENGTH,@ENABLED);SELECT SCOPE_IDENTITY()";
        public static string updateUserAddress = "UPDATE CLIENT_ADDRESSES SET LABEL=@LABEL,ADDRESS_STRING=@ADDRESS_STRING,GOOGLEMAPS_WIDTH=@GOOGLEMAPS_WIDTH,GOOGLEMAPS_LENGTH=@GOOGLEMAPS_LENGTH WHERE ID=@ID AND CLIENT_ID=@CLIENT_ID";
        public static string incativeUserAddress = "UPDATE CLIENT_ADDRESSES SET ENABLED=0 WHERE ID=@ID";
        public static string selectAllFavoritesProducts = @"SELECT F.*, H.NAME AS HARDWARE_NAME,H.CATEGORY_ID AS CATEGORY_ID, H.ID AS HARDWARE_ID,HC.NAME AS HARDWARE_CATEGORY_NAME, C.NAME AS COMPANY_NAME,C.ID AS SHOP_ID, H.PRICE AS PRICE FROM FAVORITES F, HARDWARE H, HARDWARE_CATEGORY HC,COMPANIES C
                                                 WHERE F.PRODUCT_ID=H.ID AND H.CATEGORY_ID=HC.ID AND F.USER_ID=@USER_ID AND HC.COMPANY_ID=C.ID";

        public static string insertFavoriteProduct = @"DECLARE @IS_ADDED int
                                                SET @IS_ADDED = ISNULL((SELECT TOP(1) ID FROM FAVORITES WHERE PRODUCT_ID=@PRODUCT_ID AND USER_ID=@USER_ID ORDER BY ID DESC),0)
                                                IF @IS_ADDED=0
                                                BEGIN
                                                INSERT INTO FAVORITES(PRODUCT_ID, USER_ID) VALUES(@PRODUCT_ID,@USER_ID)
                                                END";
        public static string updateFavoriteProduct = @"DELETE FROM FAVORITES WHERE PRODUCT_ID=@PRODUCT_ID AND USER_ID=@USER_ID";
        public static string clearFavorites = @"DELETE FROM FAVORITES WHERE USER_ID=@USER_ID";
        public static string validateEmail = "UPDATE USERS SET IS_EMAIL_VALIDATED=1 WHERE ID=@USER_ID";
        public static string updateUserCode = "UPDATE USERS SET CODE=@CODE WHERE ID=@USER_ID";


        public static string selectAllFiltersByCategorySlugAndLanguage = @"SELECT FC.ID AS FILTER_CATEGORY_ID,FC.NAME AS FILTER_CATEGORY_NAME, FC.SLUG AS FILTER_CATEGORY_SLUG, FCT.TEXT AS FILTER_CATEGORY_TEXT,F_TYPE.NAME AS FILTER_TYPE, FT.TEXT AS FILTER_NAME, F.SLUG AS FILTER_SLUG
FROM 
FILTER_CATEGORIES FC, 
FILTER_CATEGORIES_TEXT FCT,
FILTER_TYPE F_TYPE,
FILTERS F,
FILTERS_TEXT FT
WHERE 
FC.FILTER_TYPE_ID=F_TYPE.ID AND
FCT.FILTER_CATEGORIES_ID=FC.ID AND 
FCT.LANGUAGE_ID=(SELECT ID FROM LANGUAGES WHERE CODE=@LANGUAGE_CODE)
AND 
FT.LANGUAGE_ID=FCT.LANGUAGE_ID
AND 
FC.ID IN (SELECT FILTER_CATEGORIES_ID FROM HARDWARE_CATEGORIES_FILTER_CATEGORIES WHERE HARDWARE_CATEGORY_ID=(SELECT ID FROM HARDWARE_CATEGORY WHERE NAME=@CATEGORY_SLUG))
AND F.ACTIVE=1 AND FC.ACTIVE=1
AND F.CATEGORY_ID=FC.ID
AND FT.FILTER_ID=F.ID
ORDER BY FCT.TEXT ASC";

        public static string getAllProductComments = "SELECT HC.*, U.NAME + ' ' + U.SURNAME AS USER_NAME,U.ID AS USER_ID FROM HARDWARE_COMMENTS HC, USERS U WHERE HC.FROM_USER_ID=U.ID AND HC.HARDWARE_ID=(SELECT ID FROM HARDWARE WHERE NAME=@HARDWARE_SLUG AND ACTIVE=1) ORDER BY ID DESC";
        public static string addProductComment = @"INSERT INTO HARDWARE_COMMENTS(HARDWARE_ID,COMMENT_TEXT,COMMENT_DATE,FROM_USER_ID,SHOW_MY_NAME,STAR)
                                                                        VALUES((SELECT ID FROM HARDWARE WHERE NAME=@HARDWARE_SLUG AND ACTIVE=1),@COMMENT_TEXT,GETDATE(),@FROM_USER_ID,@SHOW_MY_NAME,@STAR)";


        public static string getRelatedProducts = @"SELECT H.*,HC.NAME AS CATEGORY_NAME,C.NAME AS COMPANY_NAME,C.LOGO AS COMPANY_LOGO,
                                                        (SELECT TOP(1) HARDWARE_IMAGE FROM HARDWARE_PICTURES WHERE HARDWARE_ID=H.ID ORDER BY ID ASC) AS HARDWARE_IMAGE
                                                        FROM HARDWARE H, HARDWARE_CATEGORY HC, COMPANIES C WHERE
                                                        H.CATEGORY_ID=HC.ID AND HC.COMPANY_ID=C.ID AND
                                                        C.ACTIVE=1 AND HC.ACTIVE=1 AND H.ACTIVE=1 AND H.CATEGORY_ID=(SELECT CATEGORY_ID FROM HARDWARE WHERE NAME=@HARDWARE_SLUG AND ACTIVE=1) AND H.ID<>(SELECT ID FROM HARDWARE WHERE NAME=@HARDWARE_SLUG AND ACTIVE=1)";

        public static string getSearchResult = @"SELECT H.*,HC.NAME AS CATEGORY_NAME,C.NAME AS COMPANY_NAME,C.LOGO AS COMPANY_LOGO,C.ID AS SHOP_ID,
                                                        (SELECT TOP(1) HARDWARE_IMAGE FROM HARDWARE_PICTURES WHERE HARDWARE_ID=H.ID ORDER BY ID ASC) AS HARDWARE_IMAGE
                                                        FROM HARDWARE H, HARDWARE_CATEGORY HC, COMPANIES C WHERE
                                                        H.CATEGORY_ID=HC.ID AND HC.COMPANY_ID=C.ID AND
                                                        C.ACTIVE=1 AND HC.ACTIVE=1 AND H.ACTIVE=1 AND 
                                                        ((H.NAME LIKE '%' + @HARDWARE_SLUG + '%') OR (H.CATEGORY_ID=(SELECT ID FROM HARDWARE_CATEGORY WHERE NAME LIKE '%' + @HARDWARE_SLUG + '%' AND ACTIVE=1)) OR (H.MANUFACTURER_ID=(SELECT ID FROM HARDWARE_MANUFACTURER WHERE NAME LIKE '%' + @HARDWARE_SLUG + '%' AND ACTIVE=1)))
                                                         ORDER BY H.ID DESC";


        public static string getFilterResult = @"SELECT H.*,HC.NAME AS CATEGORY_NAME,C.NAME AS COMPANY_NAME,C.LOGO AS COMPANY_LOGO,
                                                        (SELECT TOP(1) HARDWARE_IMAGE FROM HARDWARE_PICTURES WHERE HARDWARE_ID=H.ID ORDER BY ID ASC) AS HARDWARE_IMAGE
                                                        FROM HARDWARE H, HARDWARE_CATEGORY HC, COMPANIES C WHERE
                                                        H.CATEGORY_ID=HC.ID AND HC.COMPANY_ID=C.ID AND
                                                        C.ACTIVE=1 AND HC.ACTIVE=1 AND H.ACTIVE=1 
                                                        {0} ORDER BY H.ID DESC  OFFSET @PAGE*@PAGE_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY";
        public static string getFilterResultByCategory = @"SELECT H.*,HC.NAME AS CATEGORY_NAME,C.NAME AS COMPANY_NAME,C.LOGO AS COMPANY_LOGO,
                                                        (SELECT TOP(1) HARDWARE_IMAGE FROM HARDWARE_PICTURES WHERE HARDWARE_ID=H.ID ORDER BY ID ASC) AS HARDWARE_IMAGE
                                                        FROM HARDWARE H, HARDWARE_CATEGORY HC, COMPANIES C WHERE
                                                        (H.CATEGORY_ID=HC.ID OR H.CATEGORY_ID IN (SELECT ID FROM HARDWARE_CATEGORY WHERE CATEGORY_ID=HC.ID)) AND HC.COMPANY_ID=C.ID AND
                                                        C.ACTIVE=1 AND HC.ACTIVE=1 AND H.ACTIVE=1 AND HC.NAME=@CATEGORY_SLUG
                                                        {0} ORDER BY H.ID DESC  OFFSET @PAGE*@PAGE_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY";
        public static string getFilterResultByCategoryTotal = @"SELECT H.*,HC.NAME AS CATEGORY_NAME,C.NAME AS COMPANY_NAME,C.LOGO AS COMPANY_LOGO,
                                                        (SELECT TOP(1) HARDWARE_IMAGE FROM HARDWARE_PICTURES WHERE HARDWARE_ID=H.ID ORDER BY ID ASC) AS HARDWARE_IMAGE
                                                        FROM HARDWARE H, HARDWARE_CATEGORY HC, COMPANIES C WHERE
                                                        H.CATEGORY_ID=HC.ID AND HC.COMPANY_ID=C.ID AND
                                                        C.ACTIVE=1 AND HC.ACTIVE=1 AND H.ACTIVE=1 AND HC.NAME=@CATEGORY_SLUG";
        public static string getTotalFilterResult = @"SELECT H.*,HC.NAME AS CATEGORY_NAME,C.NAME AS COMPANY_NAME,C.LOGO AS COMPANY_LOGO,
                                                        (SELECT TOP(1) HARDWARE_IMAGE FROM HARDWARE_PICTURES WHERE HARDWARE_ID=H.ID ORDER BY ID ASC) AS HARDWARE_IMAGE
                                                        FROM HARDWARE H, HARDWARE_CATEGORY HC, COMPANIES C WHERE
                                                        H.CATEGORY_ID=HC.ID AND HC.COMPANY_ID=C.ID AND
                                                        C.ACTIVE=1 AND HC.ACTIVE=1 AND H.ACTIVE=1 
                                                        {0} ORDER BY H.ID DESC";
        public static string getAllBuyingHardwareInfo = @"SELECT H.NAME AS HARDWARE_NAME, C.NAME AS COMPANY_NAME, BHI.BUYING_DATE AS BUYING_DATE, H.ID AS HARDWARE_ID, 
                                                        ISNULL(BHI.SERIAL_NUMBER,'') AS SERIAL_NUMBER,BHI.HAVE_GUARANTEE AS HAVE_GUARANTEE
                                                        FROM BUYING_REQUEST_HARDWARE_INFO BHI, HARDWARE H, COMPANIES C
                                                        WHERE
                                                        BHI.HARDWARE_ID=H.ID AND C.ID=(SELECT COMPANY_ID FROM HARDWARE_CATEGORY WHERE ID=H.CATEGORY_ID)
                                                        AND BHI.CLIENT_ID=@USER_ID {0} ORDER BY BHI.BUYING_DATE DESC  OFFSET @PAGE*@PAGE_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY";

        public static string getTotalBuyingHardwareInfo = @"SELECT H.NAME AS HARDWARE_NAME, C.NAME AS COMPANY_NAME, BHI.BUYING_DATE AS BUYING_DATE, H.ID AS HARDWARE_ID, 
                                                        ISNULL(BHI.SERIAL_NUMBER,'') AS SERIAL_NUMBER,BHI.HAVE_GUARANTEE AS HAVE_GUARANTEE
                                                        FROM BUYING_REQUEST_HARDWARE_INFO BHI, HARDWARE H, COMPANIES C
                                                        WHERE
                                                        BHI.HARDWARE_ID=H.ID AND C.ID=(SELECT COMPANY_ID FROM HARDWARE_CATEGORY WHERE ID=H.CATEGORY_ID)
                                                        AND BHI.CLIENT_ID=@USER_ID  {0}";

        public static string getAllClients = "SELECT U.*, UR.NAME AS USER_ROLE FROM USERS U, USER_ROLE UR WHERE U.ACTIVE=1 AND U.ROLE_ID=UR.ID";
        public static string getAllClientsWithPaging = "SELECT U.*, UR.NAME AS USER_ROLE FROM USERS U, USER_ROLE UR WHERE U.ACTIVE=1 AND U.ROLE_ID=UR.ID {0} ORDER BY U.ID DESC  OFFSET @PAGE*@PAGE_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY";
        public static string getAllClientsWithoutPaging = "SELECT U.*, UR.NAME AS USER_ROLE FROM USERS U, USER_ROLE UR WHERE U.ACTIVE=1 AND U.ROLE_ID=UR.ID {0} ORDER BY U.ID DESC";

        public static string updateUserPassword = "UPDATE USERS SET PASSWORD=@PASSWORD WHERE ID=@USER_ID";
        public static string getUserById = "SELECT * FROM USERS WHERE ID=@USER_ID";


        public static string getUserInfoBySocialLinks = "SELECT * FROM USERS WHERE ID=(SELECT TOP(1) USER_ID FROM USER_SOCIAL_LINKS WHERE SOCIAL_USER_ID=@SOCIAL_USER_ID AND SOCIAL_USER_TOKEN=@SOCIAL_USER_TOKEN ORDER BY ID DESC)";

        public static string getAllCalls = @"SELECT C.*, U.ID AS CALLING_USER_ID, U.NAME + ' ' + U.SURNAME AS USER_NAME, AU.ID AS ANSWERED_BY_ID, AU.NAME + ' ' + AU.SURNAME AS ANSWERED_USER_NAME,
                                            COM.ID AS CLIENT_COMPANY_ID, COM.NAME AS COMPANY_NAME FROM CALLS C LEFT JOIN USERS U ON C.USER_ID=C.ID LEFT JOIN USERS AU ON C.ANSWERED_BY=AU.ID, COMPANIES COM WHERE COM.ID=C.COMPANY_ID AND C.COMPANY_ID=@COMPANY_ID";
        public static string getAllCallsById = @"SELECT C.*, U.ID AS CALLING_USER_ID, U.NAME + ' ' + U.SURNAME AS USER_NAME, AU.ID AS ANSWERED_BY_ID, AU.NAME + ' ' + AU.SURNAME AS ANSWERED_USER_NAME,
                                            COM.ID AS CLIENT_COMPANY_ID, COM.NAME AS COMPANY_NAME FROM CALLS C LEFT JOIN USERS U ON C.USER_ID=C.ID LEFT JOIN USERS AU ON C.ANSWERED_BY=AU.ID, COMPANIES COM WHERE COM.ID=C.COMPANY_ID AND C.COMPANY_ID=@COMPANY_ID AND C.ID=@ID";
        public static string addNewCall = "INSERT INTO CALLS(USER_ID, DURATION, CALL_STATUS, CALLING_NUMBER, ANSWERED_BY, INCOMING, COMPANY_ID) VALUES (@USER_ID, @DURATION, @CALL_STATUS, @CALLING_NUMBER, @ANSWERED_BY, @INCOMING, @COMPANY_ID)";
        public static string updateCall = "UPDATE CALLS SET {0} WHERE ID=@ID AND COMPANY_ID=@COMPANY_ID";
        public static DataTable Select(string query, Dictionary<string, object> whereList = null)
        {
            using (SqlConnection conn = new SqlConnection())
            {
                conn.ConnectionString = connectionString;
                conn.Open();
                SqlCommand comm = new SqlCommand();
                comm.Connection = conn;
                comm.CommandText = query;
                comm.Parameters.Clear();
                if (whereList != null && whereList.Count > 0)
                {
                    foreach (KeyValuePair<string, object> items in whereList)
                    {
                        comm.Parameters.AddWithValue(string.Format("@{0}", items.Key), items.Value);
                    }
                }
                SqlDataReader reader = comm.ExecuteReader();
                DataTable dt = new DataTable();
                dt.Load(reader);
                return dt;
            }
        }

        public static string Query(string query, Dictionary<string, object> whereList = null, bool scopeIdentity = false)
        {
            String result = String.Empty;
            using (SqlConnection conn = new SqlConnection())
            {
                conn.ConnectionString = connectionString;
                conn.Open();
                SqlCommand comm = new SqlCommand();
                comm.Connection = conn;
                comm.CommandText = query;
                comm.Parameters.Clear();
                if (whereList != null && whereList.Count > 0)
                {
                    foreach (KeyValuePair<string, object> items in whereList)
                    {
                        comm.Parameters.AddWithValue(string.Format("@{0}", items.Key), items.Value);
                    }
                }
                try
                {
                    if (!scopeIdentity)
                    {
                        comm.ExecuteNonQuery();
                        result = "OK";
                    }
                    else
                        result = comm.ExecuteScalar().ToString();
                }
                catch (SqlException E)
                {
                    result = E.Message;
                }

            }
            return result;
        }
    }
}